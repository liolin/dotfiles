#+TITLE: Dekstop Configuration of liolin
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh :tangle-mode (identity #o444) :shebang #!/usr/bin/env bash
#+PROPERTY: header-args:css :tangle-mode (identity #o444)
#+PROPERTY: header-args:conf :tangle-mode (identity #o444)
#+PROPERTY: header-args:json :tangle-mode (identity #o444)
#+PROPERTY: header-args:yaml :tangle-mode (identity #o444)



tangle-mode:
- controls the permissions for the file
- #0555 = r+x
- #0444 = r
- [[https://orgmode.org/manual/Extracting-Source-Code.html][Extracting Source Code (The Org Manual)]]


* env
#+begin_src sh :tanle no
  PATH DEFAULT=${PATH}:@{HOME}/cargo/bin
  PATH DEFAULT=${PATH}:@{HOME}/.local/bin
  PATH DEFAULT=${PATH}:@{HOME}/dotnet/tools
  PATH DEFAULT=${PATH}:@{HOME}/.ghcup/bin
  PATH DEFAULT=${PATH}:@{HOME}/.cabal/bin
  PATH DEFAULT=${PATH}:@{HOME}/.bun/bin

  EDITOR DEFAULT="emacsclient -c -a emacs"
  VISUAL DEFAULT="emacsclient -c -a emacs"

  # Globals
  TZ=Europe/Zurich
  LANG=en_US.UTF-8

  # Environment-local
  CARGO_TARGET_DIR DEFAULT=@{HOME}/.cargo-target
  PATH DEFAULT=${PATH}:@{HOME}/.cargo-target/release/

  # Rust stuff
  RUST_BACKTRACE=1

  # .NET stuff
  DOTNET_CLI_TELEMETRY_OPTOUT=1

  # Java stuff
  _JAVA_AWT_WM_NONREPARENTING=1

  #export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
#+end_src

* ENV Variables
The following are the env variables which are valid over all shells. 
They are included over =noweb= in the =profile= files for the specific shells.

#+NAME: ENV-VARS
#+begin_src sh :tanle no
  BUN_INSTALL="$HOME/.bun"
  PATH="$HOME/.cargo/bin:$PATH"
  PATH="$HOME/.dotnet/tools:$PATH"
  PATH="$HOME/.local/bin:$PATH"
  PATH="$HOME/.ebcli-virtual-env/executables:$PATH"
  PATH=$BUN_INSTALL/bin:$PATH


  if [ -d "/var/lib/flatpak/exports/share/applications" ] ; then
      XDG_DATA_DIRS="/var/lib/flatpak/exports/share/applications:$XDG_DATA_DIRS"
  fi

  if [ -d "$HOME/.local/share/flatpak/exports/share/applications" ] ; then
      XDG_DATA_DIRS="$HOME/.local/share/flatpak/exports/share/applications:$XDG_DATA_DIRS"
  fi

  [ -f "/home/liolin/.ghcup/env" ] && source "/home/liolin/.ghcup/env"

  #[ -f "/home/liolin/.nix-profile/etc/profile.d/nix.sh" ] && source "/home/liolin/.nix-profile/etc/profile.d/nix.sh"
  #[ -f "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh" ] && source "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh"

  export PATH
  export BUN_INSTALL
  export XDG_DATA_DIRS
  export BUN_INSTALL
  export ALTERNATE_EDITOR=""
  export EDITOR="emacsclient -c -a emacs"
  export VISUAL="emacsclient -c -a emacs"
  export DOTNET_CLI_TELEMETRY_OPTOUT=1
  export LEDGER_FILE="/home/liolin/org/finance/current.journal"
  export LANG=en_US.UTF-8
  export _JAVA_AWT_WM_NONREPARENTING=1
  export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
  export GTK_IM_MODULE=ibus
  export QT_IM_MODULE=ibus
  export XMODIFIERS=@im=ibus
  export CARGO_TARGET_DIR="$HOME/.cargo-target"
#+end_src

* org-protocol
#+begin_src conf :tangle ~/.local/share/applications/org-protocol.desktop
[Desktop Entry]
Name=org-protocol
Comment=Intercept calls from emacsclient to trigger custom actions
Categories=Other;
Keywords=org-protocol;
Icon=emacs
Type=Application
Exec=emacsclient -- %u
Terminal=false
StartupWMClass=Emacs
MimeType=x-scheme-handler/org-protocol;

#+end_src
* syncorg
** syncorg service
#+begin_src conf :tangle ~/.config/systemd/user/syncorg.service :tangle-mode (identity #o444)
  [Unit]
  Description=Sync org directory with Github

  [Service]
  Type=simple
  ExecStart=/home/liolin/.local/bin/syncorg

  [Install]
  WantedBy=default.target
#+end_src
** syncorg timer
#+begin_src conf :tangle ~/.config/systemd/user/syncorg.timer :tangle-mode (identity #o444)
  [Unit]
  Description=Sync org directory with Github

  [Timer]
  OnBootSec=0s
  OnUnitActiveSec=15m

  [Install]
  WantedBy=timers.target
#+end_src
** syncorg script
#+begin_src sh :tangle ~/.local/bin/syncorg :tangle-mode (identity #o555)
  #!/usr/bin/env bash
  set -Eeu

  export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)

  echo "Start"
  cd /home/liolin/org
  dirty=$(git status -s | grep -E "[a-zA-Z]" | wc -l)

if [ $dirty -gt 0 ]; then
    echo "Add new files"
    git add .
    git commit -m "Update using systemd.timer"
fi

  echo "Pull"
  git pull

  echo "Push"
  git push

  cd /home/liolin/roam
  dirty=$(git status -s | grep -E "[a-zA-Z]" | wc -l)

  if [ $dirty -gt 0 ]; then
      echo "Add new files"
      git add .
      git commit -m "Update"
  fi

  echo "Pull"
  git pull

  echo "Push"
  git push
#+end_src
* ical2org
** ical2org service
#+begin_src conf :tangle ~/.config/systemd/user/ical2org.service :tangle-mode (identity #o444)
  [Unit]
  Description=Convert ical to org

  [Service]
  Type=simple
  ExecStart=/home/liolin/.local/bin/ical2org

  [Install]
  WantedBy=default.target
#+end_src
** ical2org timer
#+begin_src conf :tangle ~/.config/systemd/user/ical2org.timer :tangle-mode (identity #o444)
  [Unit]
  Description=Convert ical to org

  [Timer]
  OnBootSec=0s
  OnUnitActiveSec=15m

  [Install]
  WantedBy=timers.target
#+end_src
** ical2org script
#+begin_src awk :tangle ~/.local/bin/ical2org.awk :tangle-mode (identity #o444)
#!/usr/bin/env -S gawk -f
# awk script for converting an iCal formatted file to a sequence of org-mode headings.
# this may not work in general but seems to work for day and timed events from Google's
# calendar, which is really all I need right now...
#
# usage:
#   awk -f THISFILE < icalinputfile.ics > orgmodeentries.org
#
# Note: change org meta information generated below for author and
# email entries!
#
# Caveats:
#
# - date entries with no time specified are assumed to be local time zone;
#   same remark for date entries that do have a time but do not end with Z
#   e.g.: 20130101T123456 is local and will be kept as 2013-01-01 12:34
#   where 20130223T123422Z is UTC and will be corrected appropriately
#
# - UTC times are changed into local times, using the time zone of the
#   computer that runs the script; it would be very hard in an awk script
#   to respect the time zone of a file belonging to another time zone:
#   the offsets will be different as well as the switchover time(s);
#   (consider a remote shell to a computer with the file's time zone)
#
# - the UTC conversion entirely relies on the built-in strftime method;
#   the author is not responsible for any erroneous conversions nor the
#   consequence of such conversions
#
# - does process RRULE recurring events, but ignores COUNT specifiers
#
# - does not process EXDATE to exclude date(s) from recurring events
#
# Eric S Fraga
# 20100629 - initial version
# 20100708 - added end times to timed events
#          - adjust times according to time zone information
#          - fixed incorrect transfer for entries with ":" embedded within the text
#          - added support for multi-line summary entries (which become headlines)
# 20100709 - incorporated time zone identification
#          - fixed processing of continuation lines as Google seems to
#            have changed, in the last day, the number of spaces at
#            the start of the line for each continuation...
#          - remove backslashes used to protect commas in iCal text entries
# no further revision log after this as the file was moved into a git
# repository...
#
# Updated by: Guido Van Hoecke <guivhoATgmailDOTcom>
# Last change: 2013.05.26 14:28:33
#----------------------------------------------------------------------------------

BEGIN {
    ### config section

    attending_types["UNSET"] = 0;
    attending_types["ATTENDING"] = 1;
    attending_types["NEEDS_ACTION"] = 2;
    attending_types["NOT_ATTENDING"] = 3;
    attending_types[0] = "UNSET";
    attending_types[1] = "ATTENDING";
    attending_types[2] = "NEEDS_ACTION";
    attending_types[3] = "NOT_ATTENDING";

    # map of UIDS for duplicate checking -- sometimes the same id comes down
    # with multiple VEVENTS
    UIDS[0];

    # map of people attending a given event
    people_attending[0];

    # maximum age in days for entries to be output: set this to -1 to
    # get all entries or to N>0 to only get enties that start or end
    # less than N days ago
    max_age = 7;

    # set to 1 or 0 to yes or not output a header block with TITLE,
    # AUTHOR, EMAIL etc...
    header = 1;

    # set to 1 or 0 to yes or not output the original ical preamble as
    # comment
    preamble = 1;

    # set to 1 to output time and summary as one line starting with
    # the time (value 1) or to 0 to output the summary as first line
    # and the date and time info as a later line (after the property
    # drawer or org complains)
    condense = 0;

    # set to 1 or 0 to yes or not output the original ical entry as a
    # comment (mostly useful for debugging purposes)
    original = 1;

    # google truncates long subjects with ... which is misleading in
    # an org file: it gives the unfortunate impression that an
    # expanded entry is still collapsed; value 1 will trim those
    # ... and value 0 doesn't touch them
    trimdots = 1;

    # change this to your name
    author = ENVIRON["AUTHOR"] != "" ? ENVIRON["AUTHOR"] : "Olivier Lischer"

    # and to your email address
    emailaddress = ENVIRON["EMAIL"] != "" ? ENVIRON["EMAIL"] : "olivier.lischer@ost.ch"

    # main title of the Org file
    title = ENVIRON["TITLE"] != "" ? ENVIRON["TITLE"] : "OST Calendar"

    # calendar/category name for display in org-mode
    calendarname = ENVIRON["CALENDAR"] != "" ? ENVIRON["CALENDAR"] : "OST Calendar"

    # any tags for this calendar (e.g. "WORK" or "PERSONAL")
    filetags = ENVIRON["FILETAGS"] != "" ? ENVIRON["FILETAGS"] : "unknown"

    # timezone offsets
    # TODO: this is stupid
    tz_offsets["America/Los_Angeles"] = 0
    tz_offsets["America/Chicago"] = 2

    ### end config section

    # use a colon to separate the type of data line from the actual contents
    FS = ":";

    # we only need to preserve the original entry lines if either the
    # preamble or original options are true
    preserve = preamble || original
    first = 1;      # true until an event has been found
    max_age_seconds = max_age*24*60*60

    if (header) {
        print "#+TITLE:      ", title
        print "#+AUTHOR:     ", author
        print "#+EMAIL:      ", emailaddress
        print "#+DESCRIPTION: converted using the ical2org awk script"
        print "#+CATEGORY:   ", calendarname
        print "#+STARTUP:     hidestars"
        print "#+STARTUP:     overview"
        print "#+FILETAGS:   ", filetags
        print ""
    }
}

# continuation lines (at least from Google) start with a space. If the
# continuation is after a processed field (description, summary, attendee,
# etc.) append the entry to the respective variable
/^[ ]/ {
    if (indescription) {
        entry = entry gensub("\r", "", "g", gensub("^[ ]", "", 1, $0));
        # print "entry continuation: " entry
    } else if (insummary) {
        summary = summary gensub("\r", "", "g", gensub("^[ ]", "", 1, $0))
        # print "summary continuation: " summary
    } else if (inattendee) {
        attendee = attendee gensub("\r", "", "g", gensub("^[ ]", "", 1, $0))
        # print "attendee continuation: " attendee
        are_we_going(attendee)
        add_attendee(attendee)
    } else if (inlocation) {
        location = location unescape(gensub("\r", "", "g", $0), 0);

    }
    if (preserve)
        icalentry = icalentry "\n" $0
}

/^BEGIN:VEVENT/ {
    # start of an event: initialize global values used for each event
    date = "";
    entry = ""
    headline = ""
    icalentry = ""  # the full entry for inspection
    id = ""
    indescription = 0;
    insummary = 0
    inattendee = 0
    inlocation = 0
    in_alarm = 0
    got_end_date = 0
    attending = attending_types["UNSET"];
    # http://unix.stackexchange.com/a/147958/129055
    intfreq = "" # the interval and frequency for repeating org timestamps
    lasttimestamp = -1;
    location = ""
    rrend = ""
    status = ""
    summary = ""
    attendee = ""
    delete people_attending;

    # if this is the first event, output the preamble from the iCal file
    if (first) {
        if(preamble) {
            print "* COMMENT original iCal preamble"
            print gensub("\r", "", "g", icalentry)
        }
        if (preserve)
            icalentry = ""
        first = 0;
    }
}

# any line that starts at the left with a non-space character is a new data field

/^BEGIN:VALARM/ {
    # alarms have their own UID, DESCRIPTION, etc. We don't want these polluting the real fields
    in_alarm = 1
}

/^END:VALARM/ {
    in_alarm = 0
}

/^[A-Z]/ {
    # we do not copy DTSTAMP lines as they change every time you download
    # the iCal format file which leads to a change in the converted
    # org file as I output the original input.  This change, which is
    # really content free, makes a revision control system update the
    # repository and confuses.
    if (preserve)
        if (! index("DTSTAMP", $1))
            icalentry = icalentry "\n" $0
    # this line terminates the collection of description and summary entries
    indescription = 0;
    insummary = 0;
    inattendee = 0;
}

# this type of entry represents a day entry, not timed, with date stamp YYYYMMDD

/^DTSTART;VALUE=DATE[^-]/ {
    date = datestring($2);
}

/^DTEND;VALUE=DATE[^-]/ {
    got_end_date = 1
    end_date = datestring($2, 1);
    if ( issameday )
        end_date = ""
}


# this represents a timed entry with date and time stamp YYYYMMDDTHHMMSS
# we ignore the seconds
/^DTSTART[:;][^V]/ {
    tz = "";
    match($0, /TZID=([^:]*)/, a)
    {
        tz = a[1];
    }
    offset = tz_offsets[tz]

    date = datetimestring($2, offset);
    # print date;

    if (date != "" && got_end_date) {
        fix_date_time()
    }
}

# and the same for the end date;

/^DTEND[:;][^V]/ {
    # NOTE: this doesn't necessarily appear after DTSTART
    tz = "";
    match($0, /TZID=([^:]*)/, a)
    {
        tz = a[1];
    }
    offset = tz_offsets[tz]

    end_date = datetimestring($2, offset);
    got_end_date = 1

    if (date != "" && got_end_date) {
        # We got start and end date/time, let's munge as appropriate
        fix_date_time()
    }
}


# this represents a timed entry with a UTC datetime stamp YYYYMMDDTHHMMSSZ
# we ignore the seconds
/^DTSTART[:;]VALUE=DATE-TIME/ {
    tz = "";
    offset = tz_offsets[tz]

    date = datetimestring($2, offset);
    # print date;

    if (date != "" && got_end_date) {
        fix_date_time()
    }
}

# and the same for the end date;

/^DTEND[:;]VALUE=DATE-TIME/ {
    # NOTE: this doesn't necessarily appear after DTSTART
    tz = "";
    offset = tz_offsets[tz]

    end_date = datetimestring($2, offset);
    got_end_date = 1

    if (date != "" && got_end_date) {
        # We got start and end date/time, let's munge as appropriate
        fix_date_time()
    }
}


# repetition rule

/^RRULE:FREQ=(DAILY|WEEKLY|MONTHLY|YEARLY)/ {
    # TODO: handle BYDAY values for events that repeat weekly for multiple days
    # (e.g. a "Gym" event)

    # get the d, w, m or y value
    freq = tolower(gensub(/.*FREQ=(.).*/, "\\1", 1, $0))
    # get the interval, and use 1 if none specified
    interval =  $2 ~ /INTERVAL=/ ? gensub(/.*INTERVAL=([0-9]+);.*/, "\\1", 1, $2) : 1
    # get the enddate of the rule and use "" if none specified
    rrend = $2 ~ /UNTIL=/ ? datestring(gensub(/.*UNTIL=([0-9]{8}).*/, "\\1", 1, $2)) : ""
    rrend_raw = $2 ~ /UNTIL=/ ? gensub(/.*UNTIL=([0-9]{8}).*/, "\\1", 1, $2) : ""
    repeat_count = $2 ~ /COUNT=/ ? gensub(/.*COUNT=([0-9]+).*/, "\\1", 1, $2) : ""
    # build the repetitor vale as understood by org
    intfreq =  " +" interval freq
    # if the repetition is daily, and there is an end date, drop the repetitor
    # as that is the default
    if (intfreq == " +1d" && end_date == "" && rrend != "")
        intfreq = ""
    now = strftime("%Y%m%dT%H%M%SZ")
    if (rrend_raw != "" && rrend_raw < now)
        intfreq = ""
    if (repeat_count != "")      # TODO: count repeats correctly
        intfreq = ""
}

# The description will the contents of the entry in org-mode.
# this line may be continued.

/^DESCRIPTION/ {
    if (!in_alarm) {
        # Setting $1 to "" clears colons from items like "1:1 with Marc", so we
        # strip "DESCRIPTION:" off of the front instead
        # $1 = "";
        entry = entry gensub("\r", "", "g", gensub(/^DESCRIPTION:/, "", 1, $0));
        indescription = 1;
    }
}

# the summary will be the org heading

/^SUMMARY/ {
    # Setting $1 to "" clears colons from items like "1:1 with Marc", so we
    # strip "SUMMARY:" off of the front instead
    if (!in_alarm) {
       summary = gensub("\r", "", "g", gensub(/^SUMMARY:/, "", 1, $0));

       # trim trailing dots if requested by config option
       if(trimdots && summary ~ /\.\.\.$/)
           sub(/\.\.\.$/, "", summary)
       insummary = 1;
       # print "Summary: " summary
    }
}

# the unique ID will be stored as a property of the entry

/^UID/ {
    if (!in_alarm) {
        id = gensub("\r", "", "g", $2);
    }
}

/^LOCATION/ {
    location = unescape(gensub("\r", "", "g", $2), 0);
    inlocation = 1;
    # print "Location: " location
}

/^STATUS/ {
    status = gensub("\r", "", "g", $2);
    # print "Status: " status
}

/^ATTENDEE/ {
    attendee = gensub("\r", "", "g", $0);
    inattendee = 1;
    # print "Attendee: " attendee
}

# when we reach the end of the event line, we output everything we
# have collected so far, creating a top level org headline with the
# date/time stamp, unique ID property and the contents, if any

/^END:VEVENT/ {
    #output event
    # print "max_age: " max_age
    # print "lasttimestamp: " lasttimestamp
    # print "lasttimestamp+max_age_seconds: " lasttimestamp+max_age_seconds
    # print "systime(): " systime()

    is_duplicate = (id in UIDS);
    if(is_duplicate == 0 && (max_age<0 || intfreq != "" || ( lasttimestamp>0 && systime()<lasttimestamp+max_age_seconds )) )
    {
        if (attending != attending_types["NOT_ATTENDING"]) {
            # build org timestamp
            if (intfreq != "")
                date = date intfreq
            # TODO: http://orgmode.org/worg/org-faq.html#org-diary-class
            else if (end_date != "")
                date = date ">--<" end_date
            else if (rrend != "")
                date = date ">--<" rrend

            # translate \n sequences to actual newlines and unprotect commas (,)
            if (condense)
                print "* <" date "> " gensub("^[ ]+", "", "", unescape(summary, 0))
            else
                print "* " gensub("^[ ]+", "", "g", unescape(summary, 0))
            print "  :PROPERTIES:"
            print     "  :ID:        " id
            if(length(location))
                print "  :LOCATION:  " location
            if(length(status))
                print "  :STATUS:    " status
            attending_string = attending_types[attending]
            if(attending_string == "UNSET")
                # No attending info at all -- assume this is an event we
                # created to block off our calendar, with no attendees, and
                # mark it as attending
                attending_string = "ATTENDING"
            print "  :ATTENDING: " attending_string
            print "  :ATTENDEES: " join_keys(people_attending)
            print "  :END:"
            if (date2 != "")
            {
                # Fake some logbook entries so we can generate a clock report
                print "  :LOGBOOK:"
                print "  CLOCK: [" date1 "]--[" date2 "] =>  " "0:00"
                print "  :END"
            }
            if (!condense)
                 print "<" date ">"

            print ""
            if(length(entry)>1)
                print gensub("^[ ]+", "", "g", unescape(entry, 1));

            # output original entry if requested by 'original' config option
            if (original)
                print "** COMMENT original iCal entry\n", gensub("\r", "", "g", icalentry)
        }
        UIDS[id] = 1;
    }
}


# Join keys in an array, return a string
function join_keys(input)
{
    joined = "";
    first_key = 1;
    for (key in input)
    {
        if (first_key != 1)
            joined = joined ", "
        joined = joined key
        first_key = 0;
    }
    return joined;
}


# unescape commas, newlines, etc. newlines are optionally converted to just
# spaces -- it's good to preserve them in descriptions for e.g. interview
# calendar events, but addresses look better with spaces as more info fits on a
# line
function unescape(input, preserve_newlines)
{
    ret = gensub("\\\\,", ",", "g",
                 gensub("\\\\;", ";", "g", input))
    if (preserve_newlines)
        ret = gensub("\\\\n", "\n", "g", ret)
    else
        ret = gensub("\\\\n", " ", "g", ret)
    return ret
    # return gensub("\\\\,", ",", "g",
    #               gensub("\\\\n", " ", "g",
    #                       gensub("\\\\;", ";", "g", input)))
}


# funtion to convert an iCal time string 'yyyymmddThhmmss[Z]' into a
# date time string as used by org, preferably including the short day
# of week: 'yyyy-mm-dd day hh:mm' or 'yyyy-mm-dd hh:mm' if we cannot
# define the day of the week

function datetimestring(input, offset)
{
    # print "________"
    # print "input : " input
    # convert the iCal Date+Time entry to a format that mktime can understand
    spec  = match(input, "([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2})([0-9]{2})([0-9]{2}).*[\r]*", a);
    year = a[1]
    month = a[2]
    day = a[3]
    hour = a[4]
    min = a[5]
    sec = a[6]
    # print "spec :" spec

    if (offset > 0)
    {
        hour -= offset
    }

    # print "input: " input
    # print "datetime: " year" "month" "day" "hour" "min" "sec
    stamp = mktime(year" "month" "day" "hour" "min" "sec);
    lasttimestamp = stamp;

    if (stamp <= 0) {
        # this is a date before the start of the epoch, so we cannot
        # use strftime and will deliver a 'yyyy-mm-dd hh:mm' string
        # without day of week; this assumes local time, and does not
        # attempt UTC offset correction
        spec = gensub("([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2})([0-9]{2})([0-9]{2}).*[\r]*", "\\1-\\2-\\3 \\4:\\5", "g", input);
        # print "==> spec:" spec;
        return spec;
    }

    if (input ~ /[0-9]{8}T[0-9]{6}Z/ ) {
        # this is an utc time;
        # we need to correct the timestamp by the utc offset for this time
        offset = strftime("%z", stamp)
        pm = substr(offset,1,1) 1 # define multiplier +1 or -1
        hh = substr(offset,2,2) * 3600 * pm
        mm = substr(offset,4,2) * 60 * pm

        # adjust the timestamp
        stamp = stamp + hh + mm
    }

    return strftime("%Y-%m-%d %a %H:%M", stamp);
}

# function to convert an iCal date into an org date;
# the optional parameter indicates whether this is an end date;
# for single or multiple whole day events, the end date given by
# iCal is the date of the first day after the event;
# if the optional 'isenddate' parameter is non zero, this function
# tries to reduce the given date by one day

function datestring(input, isenddate)
{
    #convert the iCal string to a an mktime input string
    spec = gensub("([0-9]{4})([0-9]{2})([0-9]{2}).*[\r]*", "\\1 \\2 \\3 00 00 00", "g", input);

    # compute the nr of seconds after or before the epoch
    # dates before the epoch will have a negative timestamp
    # days after the epoch will have a positive timestamp
    stamp = mktime(spec);

    if (isenddate) {
        # subtract 1 day from the timestamp
        # note that this also works for dates before the epoch
        stamp = stamp - 86400;

        # register whether the end date is same as the start date
        issameday = lasttimestamp == stamp
    }
    # save timestamp to allow for check of max_age
    lasttimestamp = stamp

    if (stamp < 0) {
        # this date is before the epoch;
        # the returned datestring will not have the short day of week string
        # as strftime does not handle negative times;
        # we have to construct the datestring directly from the input
        if (isenddate) {
            # we really should return the date before the input date, but strftime
            # does not work with negative timestamp values; so we can not use it
            # to obtain the string representation of the corrected timestamp;
            # we have to return the date specified in the iCal input and we
            # add time 00:00 to clarify this
            return spec = gensub("([0-9]{4})([0-9]{2})([0-9]{2}).*[\r]*", "\\1-\\2-\\3 00:00", "g", input);
        } else {
            # just generate the desired representation of the input date, without time;
            return gensub("([0-9]{4})([0-9]{2})([0-9]{2}).*[\r]*", "\\1-\\2-\\3", "g", input);
        }
    }

    # return the date and day of week
    return strftime("%Y-%m-%d %a", stamp);
}

# Add the current attendee's response to a set, so we can list who's going
# and who's declined
function add_attendee(attendee)
{
    match(attendee, /CN=([^;]+)/, m)
    {
        CN = tolower(m[1]);
        people_attending[CN] = 1;
    }
}

function fix_date_time()
{
    if (substr(date,1,10) == substr(end_date,1,10)) {
        # timespan within same date, use one date with a time range, but preserve
        # original dates for org-clocktable
        date1 = date
        date2 = end_date

        date = date "-" substr(end_date, length(end_date)-4)
        end_date = ""
    }
}

# Parse the current ATTENDEE line and see if it belongs to us. If so, check if
# we've accepted this calendar invite, and if so, set `attending` to True. It
# may be the case that there are no attendees (e.g. personal calendar items),
# and if that's the case, we'll leave `attending` unset. If there are attendees,
# we'll parse our status out and set `attending` appropriately.
function are_we_going(attendee)
{
    if (attending != attending_types["UNSET"])
    {
        # print "Bailing out early, attending is " attending
        return;
    }

    match(attendee, /CN=([^;]+)/, m)
    {
        # CN's can optionally be surrounded by quotes (google calendar download
        # omits, apple calendar export includes them)
        CN = gensub("\"", "", "g", tolower(m[1]));
        # TODO: no hardcoding
        if (CN == tolower(author) || CN == tolower(emailaddress))
        {
            # This is us -- did we accept the meeting?
            if (attendee ~ /PARTSTAT=ACCEPTED/)
            {
                attending = attending_types["ATTENDING"];
            }
            else if (attendee ~ /PARTSTAT=NEEDS-ACTION/)
            {
                attending = attending_types["NEEDS_ACTION"];
            }
            else {
                attending = attending_types["NOT_ATTENDING"];
            }
        }
    }
    # print "are_we_going: " attending
}

# Local Variables:
# time-stamp-line-limit: 1000
# time-stamp-format: "%04y.%02m.%02d %02H:%02M:%02S"
# time-stamp-active: t
# time-stamp-start: "Last change:[ \t]+"
# time-stamp-end: "$"
# End:
#+end_src
#+begin_src sh :tangle ~/.local/bin/ical2org :tangle-mode (identity #o555)
  #!/usr/bin/env bash
  set -Eeu

  URL=$(cat ~/.credentials/ost_calendar)
  curl -sL "${URL}" | awk -f /home/liolin/.local/bin/ical2org.awk > /home/liolin/org/Agenda/calendar_ost.org 
#+end_src
* Alacritty (problem with opengl in nix)
:PROPERTIES:
:header-args:toml: :tangle ~/.config/alacritty/alacritty.toml :tangle-mode (identity #o555)
:END:
** Window
#+begin_src toml
  [window]
  opacity = 0.85
#+end_src
** Font
#+begin_src toml
  [font]
  size = 11.0

  [font.bold]
  style = "Bold"

  [font.bold_italic]
  style = "Bold Italic"

  [font.italic]
  style = "Italic"

  [font.normal]
  family = "Fira Code Nerd Font"
  style = "Regular"
#+end_src
** Colors
I use a the dracula theme from [[https://draculatheme.com/alacritty][here]]. 
#+begin_src toml
  [colors]
  indexed_colors = []

  [colors.bright]
  black = "0x4d4d4d"
  blue = "0xcaa9fa"
  cyan = "0x9aedfe"
  green = "0x5af78e"
  magenta = "0xff92d0"
  red = "0xff6e67"
  white = "0xe6e6e6"
  yellow = "0xf4f99d"

  [colors.cursor]
  cursor = "0xf8f8f2"
  text = "0x44475a"

  [colors.dim]
  black = "0x14151b"
  blue = "0x4d5b86"
  cyan = "0x59dffc"
  green = "0x1ef956"
  magenta = "0xff46b0"
  red = "0xff2222"
  white = "0xe6e6d1"
  yellow = "0xebf85b"

  [colors.normal]
  black = "0x000000"
  blue = "0xbd93f9"
  cyan = "0x8be9fd"
  green = "0x50fa7b"
  magenta = "0xff79c6"
  red = "0xff5555"
  white = "0xbfbfbf"
  yellow = "0xf1fa8c"

  [colors.primary]
  background = "0x282a36"
  foreground = "0xf8f8f2"
#+end_src

** Shell
#+begin_src toml
  [shell]
  program = "fish"
#+end_src
** Required Packages                                               :packages:
#+begin_example
alacritty
#+end_example

* Bash
** profile
#+begin_src sh
  <<ENV-VARS>>
#+end_src
** bash_profile
#+begin_src sh
  <<ENV-VARS>>

  [ -r "~/.bashrc" ] && source ~/.bashrc 
#+end_src
** Guard
#+begin_src sh :tangle ~/.bashrc :tangle-mode (identity #o555)
  [[ $- != *i* ]] && return
#+end_src

** Alias
#+begin_src sh :tangle ~/.bashrc :tangle-mode (identity #o555)
  alias ls='eza'
  alias ll='eza -la'   # show long listing of all except ".."
  alias rm='rm -I'
  alias mv='mv -i'
  alias cp='cp -i'
  alias mount-share='systemctl start home-liolin-shares-ds.mount'
  alias batstat='upower -i /org/freedesktop/UPower/devices/battery_BAT0'
  alias syncost='rsync -avz /home/liolin/ownCloud/Private/ost/ /home/liolin/shares/ds/Documents/01_School/02_HSR/01_Unterrichtsunterlagen/06_Semester/'
  alias syncmail='rsync -avz /home/liolin/.mail/ /home/liolin/shares/ds/Documents/00_Private/99_mailArchive/'
  alias gp='git push'
  alias gpu='git pull'
  alias gc='git commit'
  alias ga='git add'
#+end_src

** starship
#+begin_src sh :tangle ~/.bashrc :tangle-mode (identity #o555)
  eval "$(starship init bash)"
#+end_src

** includes
#+begin_src sh :tangle ~/.bashrc :tangle-mode (identity #o555)
  source /usr/share/fzf/key-bindings.bash
  source /usr/share/fzf/completion.bash
  [ -f "/opt/miniconda3/etc/profile.d/conda.sh" ] && source /opt/miniconda3/etc/profile.d/conda.sh
#+end_src

** SSH
#+begin_src sh :tangle ~/.bashrc :tangle-mode (identity #o555)
  export GPG_TTY="$(tty)"
#+end_src

** fm6000
#+begin_src sh :tangle ~/.bashrc :tangle-mode (identity #o555)
  #fm6000 -r
#+end_src

** Required Packages                                               :packages:
#+begin_example
eza
upower
rsync
starship
fzf
bash-completion 
fm6000
(miniconda)
#+end_example

* cmus
#+begin_src python :tangle no
  #!/usr/bin/env python

  import sys
  import gi

  cacheDir = "/home/liolin/.cache/cmus-notify/cover"

  def parseCmusArgs():
      length = len(sys.argv)
      args = {};
      for i in range(1, length-1, 2):
	  args[sys.argv[i]] = sys.argv[i+1]

      return args


  def calculateDuration():
      pass

  def extractImage(inputFile, artist, album, title):
      import ffmpeg
      import os

      outputFile = "%s/%s-%s-%s.png" % (cacheDir, artist, album, title);
      if not os.path.isfile(outputFile):
	  stream = ffmpeg.input(inputFile)
	  stream = ffmpeg.output(stream, outputFile)
	  ffmpeg.run(stream)
      return outputFile


  def sendNotification(title, outputString = '', cover='/home/liolin/.cache/cmus-notify/cover/default.png'):
      gi.require_version('Notify', '0.7')
      from gi.repository import Notify, GdkPixbuf
      Notify.init("cmus")
      cmusNotification = Notify.Notification.new(title, outputString)
      image = GdkPixbuf.Pixbuf.new_from_file(cover)
      cmusNotification.set_image_from_pixbuf(image)
      cmusNotification.show()
      Notify.uninit()

  def main():
      args = parseCmusArgs()

      title = ""
      message = ""

      if "file" in args:
	  cover = extractImage(args["file"], args["artist"], args["album"], args["title"])
	  title = "[%s]" % args["status"]
	  message = "%s\n%s - %s" % (args["title"], args["artist"], args["album"])

      elif "url" in args:
	  title = "[%s]" % args["status"]
	  message = "%s - %s" % (args["url"], args["title"])

      else:
	  title = "[%s]" % args["status"]
	  message = ""

      sendNotification(title, message, cover)

  if __name__ == "__main__":
      main()
#+end_src

** Required Packages                                               :packages:
#+begin_example
cmus
#+end_example

* Conky
#+begin_src conf :tangle ~/.config/conky/conky.conf
  --[[
  #=====================================================================================
  #                               XMonad Conky
  #======================================================================================
  ]]

  conky.config = {
  --Various settings
  background = true,			-- forked to background
  cpu_avg_samples = 2,			-- The number of samples to average for CPU monitoring.
  diskio_avg_samples = 10,		-- The number of samples to average for disk I/O monitoring.
  double_buffer = true,			-- Use the Xdbe extension? (eliminates flicker)
  if_up_strictness = 'address',		-- how strict if testing interface is up - up, link or address
  net_avg_samples = 2,			-- The number of samples to average for net data
  no_buffers = true,			-- Subtract (file system) buffers from used memory?
  temperature_unit = 'celsius',		-- fahrenheit or celsius
  text_buffer_size = 2048,		-- size of buffer for display of content of large variables - default 256
  update_interval = 1,			-- update interval
  --imlib_cache_size = 0,                 -- disable image cache to get a new spotify cover per song

  alignment = 'bottom_right',	        -- top_left,top_middle,top_right,bottom_left,bottom_middle,bottom_right,
  gap_x = 50,				-- pixels between right or left border
  gap_y = 50,				-- pixels between bottom or left border

  -- Size
  minimum_height = 200,			-- minimum height of window
  minimum_width = 260,			-- minimum height of window
  maximum_width = 260,			-- maximum height of window

  --Graphical
  border_inner_margin = 5, 		-- margin between border and text
  border_outer_margin = 5, 		-- margin between border and edge of window
  border_width = 0, 			-- border width in pixels
  default_bar_width = 260,		-- default is 0 - full width
  default_bar_height = 10,		-- default is 6
  default_gauge_height = 25,		-- default is 25
  default_gauge_width =40,		-- default is 40
  default_graph_height = 40,		-- default is 25
  default_graph_width = 153,		-- default is 0 - full width
  default_shade_color = '#000000',	-- default shading colour
  default_outline_color = '#000000',	-- default outline colour
  draw_borders = false,			-- draw borders around text
  draw_graph_borders = true,		-- draw borders around graphs
  draw_shades = false,			-- draw shades
  draw_outline = false,			-- draw outline
  stippled_borders = 0,			-- dashing the border

  --Textual
  format_human_readable = true,		-- KiB, MiB rather then number of bytes
  font = 'Source Code Pro:bold:size=10',  -- font for complete conky unless in code defined
  max_text_width = 0,			-- 0 will make sure line does not get broken if width too smal
  max_user_text = 16384,			-- max text in conky default 16384
  override_utf8_locale = true,		-- force UTF8 requires xft
  short_units = true,			-- shorten units from KiB to k
  top_name_width = 21,			-- width for $top name value default 15
  top_name_verbose = false,		-- If true, top name shows the full command line of  each  process - Default value is false.
  uppercase = false,			-- uppercase or not
  use_spacer = 'none',			-- adds spaces around certain objects to align - default none
  use_xft = true,				-- xft font - anti-aliased font
  xftalpha = 1,				-- alpha of the xft font - between 0-1

  --Windows
  own_window = true,			-- create your own window to draw
  own_window_argb_value = 255,		-- real transparency - composite manager required 0-255
  own_window_argb_visual = true,		-- use ARGB - composite manager required
  own_window_class = 'Conky',		-- manually set the WM_CLASS name for use with xprop
  own_window_colour = '#282c34',		-- set colour if own_window_transparent no
  own_window_transparent = false,		-- if own_window_argb_visual is true sets background opacity 0%
  own_window_title = 'xmonad_conky',	-- set the name manually; default conky "hostname"
  own_window_type = 'override',		-- if own_window true options are: normal/override/dock/desktop/panel
  own_window_hints = 'undecorated,below,above,sticky,skip_taskbar,skip_pager',	-- if own_window true - just hints - own_window_type sets it

  --Colors
  color0 = '#c678dd',
  color1 = '#bbc2cf',
  color2 = '#51afef',
  color3 = '#98be65',
  };

  conky.text = [[
  ${alignc}${color0}${font Ubuntu:size=30}${time %H:%M}${font}
  ${voffset 6}${alignc}${color0}${font Ubuntu:size=14}${time %b %d, %Y}${font}${color}
  ${alignc}${color0}${font Ubuntu:size=11}${nodename}${font}${color}
  ${voffset 18}${goto 12}${color3}CPU${goto 50}$cpu%
  ${color2}${goto 12}${cpubar 8,254}
  ${voffset 5}${goto 12}$font${color1}${top name 1}$alignr$color${top cpu 1}%
  ${goto 12}${color1}${top name 2}$alignr$color${top cpu 2}%
  ${goto 12}${color1}${top name 3}$alignr$color${top cpu 3}%
  ${voffset 14}${goto 12}${color3}RAM${goto 50}$mem/$memmax
  ${color2}${goto 12}${membar 8,254}${color}
  ${goto 12}${voffset 5}${color1}${top_mem name 1}$alignr$color${top_mem mem_res 1}
  ${goto 12}${color1}${top_mem name 2}$alignr$color${top_mem mem_res 2}
  ${goto 12}${color1}${top_mem name 3}$alignr$color${top_mem mem_res 3}
  ${voffset 18}${color1}${alignc}XMONAD KEYBINDINGS${color}
  ${color1}${hr}${color}
  ${color1}[S]+[RET]${alignr}${color2}opens terminal${color}
  ${color1}[S]+[SHIFT]+c${alignr}${color2}close window${color}
  ${color1}[S]+jk${alignr}${color2}move win focus${color}
  ${color1}[S]+[SHIFT]+hjkl${alignr}${color2}move window${color}
  ${color1}[S]+[0-9]${alignr}${color2}switch workspace${color}
  ${color1}[S]+[SHIFT]+[0-9]${alignr}${color2}send window${color}
  ${color1}[S]+h/l${alignr}${color2}shrink/expand${color}
  ${color1}${hr}${color}
  ${color1}[S]+d, e${alignr}${color2}launch emacs${color}
  ${color1}[S]+d, b${alignr}${color2}ibuffer${color}
  ${color1}[S]+d, d${alignr}${color2}dired${color}
  ${color1}[S]+d, m${alignr}${color2}mu4e${color}
  ${color1}[S]+d, s${alignr}${color2}eshell${color}
  ${color1}[S]+d, a${alignr}${color2}agenda${color}
  ${color1}[S]+d, c${alignr}${color2}capture${color}
  ${color1}${hr}${color}
  ${color1}[S]+p, s${alignr}${color2}app launcher${color}
  ${color1}[S]+p, e${alignr}${color2}power menu${color}
  ${color1}[S]+p, p${alignr}${color2}pass${color}
  ${color1}${hr}${color}
  ${color1}[S]+[CTRL]+r${alignr}${color2}recompile xmonad${color}
  ${color1}[S]+[SHIFT]+r${alignr}${color2}restart xmonad${color}
  ${color1}[S]+[SHIFT]+q${alignr}${color2}quit xmonad${color}
  ]];
#+end_src

** Required Packages                                               :packages:
#+begin_example
conky
#+end_example

* Dunst
** Global
#+begin_src conf :tangle ~/.config/dunst/dunstrc
  [global]
#+end_src

*** Display
#+begin_src conf :tangle ~/.config/dunst/dunstrc
  monitor = 0
  follow = none
  geometry = "300x5-30+20"
  indicate_hidden = yes
  shrink = no
  transparency = 10
  notification_height = 0
  separator_height = 2
  progress_bar = true

  # Padding between text and separator.
  padding = 8
  horizontal_padding = 8
  frame_width = 3
  frame_color = "#1d2021"
  separator_color = frame

  # Sort messages by urgency.
  sort = yes

  # Don't remove messages, if the user is idle (no mouse or keyboard input)
  # for longer than idle_threshold seconds.
  idle_threshold = 120
#+end_src

*** Text
#+begin_src conf :tangle ~/.config/dunst/dunstrc
  font = Monospace 10
  line_height = 0
  markup = full
  format = "<b>%s</b>\n%b"
  alignment = left
  show_age_threshold = 60
  word_wrap = yes
  ellipsize = middle
  ignore_newline = no
  stack_duplicates = true
  hide_duplicate_count = false
  show_indicators = yes
#+end_src

*** TODO Icons
#+begin_src conf :tangle ~/.config/dunst/dunstrc
  icon_position = left
  max_icon_size = 64
  icon_theme = Papirus-Dark
  enable_recursive_icon_lookup=true
#+end_src

*** History
#+begin_src conf :tangle ~/.config/dunst/dunstrc
  # Should a notification popped up from history be sticky or timeout
  # as if it would normally do.
  sticky_history = yes

  # Maximum amount of notifications kept in history
  history_length = 20
#+end_src

*** Misc / Advanced
#+begin_src conf :tangle ~/.config/dunst/dunstrc
  dmenu = /usr/bin/dmenu -p dunst:
  browser = /usr/bin/firefox -new-tab

  # Always run rule-defined scripts, even if the notification is suppressed
  always_run_script = true

  # Define the title of the windows spawned by dunst
  title = Dunst

  # Define the class of the windows spawned by dunst
  class = Dunst
  startup_notification = false
  verbosity = mesg
  corner_radius = 0
#+end_src

*** Legacy
#+begin_src conf :tangle ~/.config/dunst/dunstrc
  # Use the Xinerama extension instead of RandR for multi-monitor support.
  # This setting is provided for compatibility with older nVidia drivers that
  # do not support RandR and using it on systems that support RandR is highly
  # discouraged.
  #
  # By enabling this setting dunst will not be able to detect when a monitor
  # is connected or disconnected which might break follow mode if the screen
  # layout changes.
  force_xinerama = false
#+end_src

*** Mouse
#+begin_src conf :tangle ~/.config/dunst/dunstrc
  mouse_left_click = close_current
  mouse_middle_click = do_action
  mouse_right_click = close_all
#+end_src

** Shortcuts
Configure your DE / WM to call =dunstctl=.
** Urgency
#+begin_src conf :tangle ~/.config/dunst/dunstrc
  # vim: filetype=yaml
  # dunst template
  # Base16 Gruvbox dark, hard Dark, by Dawid Kurek (dawikur@gmail.com), morhetz (https://github.com/morhetz/gruvbox)

  [urgency_low]
      background = "#1d2021"
      foreground = "#fbf1c7"

  [urgency_normal]
      background = "#1d2021"
      foreground = "#83a598"

  [urgency_critical]
      background = "#1d2021"
      foreground = "#fb4934"
#+end_src

** Required Packages                                               :packages:
#+begin_example
dunst
#+end_example

* Etc 
See [[file:system.org][system.org]]
* fish
** config.fish
#+begin_src sh :tangle ~/.config/fish/config.fish
  set PATH $PATH "$HOME/cargo/bin"
  set PATH $PATH "$HOME/.local/bin"
  set PATH $PATH "$HOME/dotnet/tools"
  set PATH $PATH "$HOME/.ghcup/bin"
  set PATH $PATH "$HOME/.cabal/bin"
  set -gx PATH $PATH "$HOME/.bun/bin"

  set -gx EDITOR "emacsclient -c -a emacs"
  set -gx VISUAL "emacsclient -c -a emacs"

  # Globals
  set -gx TZ "Europe/Zurich"
  set -gx LANG "en_US.UTF-8"

  # Environment-local
  set -gx CARGO_TARGET_DIR "$HOME/.cargo-target"
  set -gx PATH $PATH "$HOME/.cargo-target/release/"

  # Rust stuff
  set -gx RUST_BACKTRACE 1

  # .NET stuff
  set -gx DOTNET_CLI_TELEMETRY_OPTOUT 1

  # Java stuff
  set -gx _JAVA_AWT_WM_NONREPARENTING 1

  # SSH / GPG
  gpgconf --launch gpg-agent
  set -gx SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket)


  # Run sway on login
  set TTY (tty)
  if [ $TTY = "/dev/tty1" ]
     exec sway
  end

  if status is-interactive
     alias ls="eza"
     alias ll="eza -la"   # show long listing of all except ".."
     alias cp="cp -i"
     alias mv="mv -i"
     alias cat="bat -p"
     alias mount-share="systemctl start home-liolin-shares-ds.mount"
     alias batstat="upower -i /org/freedesktop/UPower/devices/battery_BAT0"
     alias syncost="rsync -avz /home/liolin/ownCloud/Private/ost/ /home/liolin/shares/ds/Documents/01_School/02_HSR/01_Unterrichtsunterlagen/06_Semester/"
     alias syncmail="rsync -avz /home/liolin/.mail/ /home/liolin/shares/ds/Documents/00_Private/99_mailArchive/"
     alias gp="git push"
     alias gpu="git pull"
     alias gc="git commit"
     alias ga="git add"
     alias cdr="cd ~/roam/"
     alias cdo="cd ~/org/"

     starship init fish | source
  end
#+end_src
** funtions
#+begin_src sh :tangle ~/.config/fish/functions/fish_user_key_bindings.fish
  function fish_user_key_bindings
    fzf_key_bindings
  end
#+end_src

#+begin_src sh :tangle ~/.config/fish/functions/yta.fish
  function yta
    mpv --ytdl-format=bestaudio "$argv"
  end
#+end_src
* Fonts
See font directory.

Installation of the fonts
#+begin_src sh :tangle no :dir ~/.dotfiles
  mkdir ~/.fonts
  cp -r resources/fonts/.fonts/* ~/.fonts/
#+end_src

#+RESULTS:

* Git
#+begin_src conf :tangle ~/.gitconfig
  [user]
  name = Olivier Lischer
  email = olivier.lischer@liolin.ch
  signingKey = 6B52B67EDA21CAF6
  username = liolin

  [pull]
  rebase = false

  [merge]
  conflictstyle = diff3

  [commit]
  gpgsign = true
#+end_src

** Required Packages                                               :packages:
#+begin_example
git
#+end_example

* GPG
** TODO gpg-agent-info
** gpg.conf
#+begin_src conf :tangle ~/.gnupg/gpg.conf
  # https://github.com/drduh/config/blob/master/gpg.conf
  # https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html
  # https://www.gnupg.org/documentation/manuals/gnupg/GPG-Esoteric-Options.html
  # Use AES256, 192, or 128 as cipher
  personal-cipher-preferences AES256 AES192 AES
  # Use SHA512, 384, or 256 as digest
  personal-digest-preferences SHA512 SHA384 SHA256
  # Use ZLIB, BZIP2, ZIP, or no compression
  personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed
  # Default preferences for new keys
  default-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed
  # SHA512 as digest to sign keys
  cert-digest-algo SHA512
  # SHA512 as digest for symmetric ops
  s2k-digest-algo SHA512
  # AES256 as cipher for symmetric ops
  s2k-cipher-algo AES256
  # UTF-8 support for compatibility
  charset utf-8
  # Show Unix timestamps
  fixed-list-mode
  # No comments in signature
  no-comments
  # No version in signature
  no-emit-version
  # Disable banner
  no-greeting
  # Long hexidecimal key format
  keyid-format 0xlong
  # Display UID validity
  list-options show-uid-validity
  verify-options show-uid-validity
  # Display all keys and their fingerprints
  with-fingerprint
  # Display key origins and updates
  #with-key-origin
  # Cross-certify subkeys are present and valid
  require-cross-certification
  # Disable caching of passphrase for symmetrical ops
  no-symkey-cache
  # Enable smartcard
  use-agent
  # Disable recipient key ID in messages
  throw-keyids
  # Default/trusted key ID to use (helpful with throw-keyids)
  #default-key 0xFF3E7D88647EBCDB
  #trusted-key 0xFF3E7D88647EBCDB
  # Keyserver URL
  #keyserver hkps://keys.openpgp.org
  #keyserver hkps://keyserver.ubuntu.com:443
  #keyserver hkps://hkps.pool.sks-keyservers.net
  #keyserver hkps://pgp.ocf.berkeley.edu
  # Proxy to use for keyservers
  #keyserver-options http-proxy=socks5-hostname://127.0.0.1:9050
  # Verbose output
  #verbose
#+end_src
** gpg-agent.conf
#+begin_src conf :tangle ~/.gnupg/gpg-agent.conf
  pinentry-program /usr/bin/pinentry-gtk-2
  ## Set timeout for passphrase unlock to 8 hours
  default-cache-ttl 28800
  max-cache-ttl 28800

  ## Set timeout for SSH key unlock
  enable-ssh-support
  default-cache-ttl-ssh 28800
  max-cache-ttl-ssh 28800
#+end_src

** sshcontrol
#+begin_src conf :tangle ~/.gnupg/sshcontrol
  # List of allowed ssh keys.  Only keys present in this file are used
  # in the SSH protocol.  The ssh-add tool may add new entries to this
  # file to enable them; you may also add them manually.  Comment
  # lines, like this one, as well as empty lines are ignored.  Lines do
  # have a certain length limit but this is not serious limitation as
  # the format of the entries is fixed and checked by gpg-agent. A
  # non-comment line starts with optional white spaces, followed by the
  # keygrip of the key given as 40 hex digits, optionally followed by a
  # caching TTL in seconds, and another optional field for arbitrary
  # flags.   Prepend the keygrip with an '!' mark to disable it.
  90783C7BE49932998FB01359A3958092318E442A
  !48ED9915566EAD80A32C2DAE3C6A23629ADC0BB4
#+end_src

* SSH
** config
#+begin_src conf :tangle ~/.ssh/config
  Host liolin.ch
    SetEnv TERM=xterm
#+end_src
* sway
#+begin_src conf :tangle ~/.config/sway/config
  ### Set WM Name
  exec wmname LG3D

  ### Variables
  set $mod Mod4
  set $left h
  set $down j
  set $up k
  set $right l
  set $term alacritty

  set $locker swaylock -k -l -i ~/Pictures/wallpapers/0008.png

  # Note: pass the final command to swaymsg so that the resulting window can be opened
  # on the original workspace that the command was run on.
  set $menu wofi --allow-images --show drun

  set $external_mon HDMI-A-1
  set $external_mon_home HDMI-A-3
  set $internal_mon eDP-1

  ### Colors
  #client.focused          #6272A4 #6272A4 #F8F8F2 #6272A4   #6272A4
  client.focused          #6272A4 #6272A4 #F8F8F2 #9AB973 #6272A4
  client.focused_inactive #44475A #44475A #F8F8F2 #44475A   #44475A
  client.unfocused        #282A36 #282A36 #BFBFBF #282A36   #282A36
  client.urgent           #44475A #FF5555 #F8F8F2 #FF5555   #FF5555
  client.placeholder      #282A36 #282A36 #F8F8F2 #282A36   #282A36
  client.background       #F8F8F2

  ### Autostart
  exec ~/.config/autostart.sh

  ### Output configuration
  output * bg ~/Pictures/wallpapers/0008.png fill
  output $internal_mon resolution 1920x1080 position 2560,0
  output $external_mon resolution 2560x1440 position 0,0
  output $external_mon_home resolution 2560x1440 position 0,0
  #output $external_mon resolution 2560x1440 position 660,0
  #focus output $external_mon # primary focus on $external mon
  # You can get the names of your outputs by running: swaymsg -t get_outputs

  default_border pixel 3

  ### Idle configuration
  exec swayidle -w \
       timeout 180 '$locker' \
       timeout 300 'swaymsg "output * dpms off"' \
       resume 'swaymsg "output * dpms on"' \
       before-sleep '$locker'
  #
  # This will lock your screen after 300 seconds of inactivity, then turn off
  # your displays after another 300 seconds, and turn your screens back on when
  # resumed. It will also lock your screen before your computer goes to sleep.


  ### Input configuration
  #
  input "type:keyboard" {
        # for more information see man setxkbmap
        xkb_layout us(altgr-intl),ch
        xkb_options grp:alt_space_toggle,ctrl:nocaps
  }
  # You can get the names of your inputs by running: swaymsg -t get_inputs
  # Read `man 5 sway-input` for more information about this section.

  ### Key bindings
  #
  # Basics:
  #
  # Start a terminal
  bindsym $mod+Return exec $term

  # Kill focused window
  bindsym $mod+Shift+c kill

  # Start your launcher
  bindsym $mod+r exec $menu

  # Drag floating windows by holding down $mod and left mouse button.
  # Resize them with right mouse button + $mod.
  # Despite the name, also works for non-floating windows.
  # Change normal to inverse to use left mouse button for resizing and right
  # mouse button for dragging.
  floating_modifier $mod normal

  # Reload the configuration file
  bindsym $mod+Shift+r reload

  #
  # Moving around:
  #
  # Move your focus around
  bindsym $mod+$left focus left
  bindsym $mod+$down focus down
  bindsym $mod+$up focus up
  bindsym $mod+$right focus right

  bindsym $mod+w focus output left
  bindsym $mod+e focus output right

  # Move the focused window with the same, but add Shift
  bindsym $mod+Shift+$left move left
  bindsym $mod+Shift+$down move down
  bindsym $mod+Shift+$up move up
  bindsym $mod+Shift+$right move right

  #
  # Workspaces:
  #
  workspace_auto_back_and_forth yes
  # Switch to workspace
  bindsym $mod+1 workspace number 1
  bindsym $mod+2 workspace number 2
  bindsym $mod+3 workspace number 3
  bindsym $mod+4 workspace number 4
  bindsym $mod+5 workspace number 5
  bindsym $mod+6 workspace number 6
  bindsym $mod+7 workspace number 7
  bindsym $mod+8 workspace number 8
  bindsym $mod+9 workspace number 9
  bindsym $mod+0 workspace number 10
  # Move focused container to workspace
  bindsym $mod+Shift+1 move container to workspace number 1
  bindsym $mod+Shift+2 move container to workspace number 2
  bindsym $mod+Shift+3 move container to workspace number 3
  bindsym $mod+Shift+4 move container to workspace number 4
  bindsym $mod+Shift+5 move container to workspace number 5
  bindsym $mod+Shift+6 move container to workspace number 6
  bindsym $mod+Shift+7 move container to workspace number 7
  bindsym $mod+Shift+8 move container to workspace number 8
  bindsym $mod+Shift+9 move container to workspace number 9
  bindsym $mod+Shift+0 move container to workspace number 10
  # Note: workspaces can have any name you want, not just numbers.
  # We just use 1-10 as the default.

  bindsym $mod+Shift+w move workspace to output left
  bindsym $mod+Shift+e move workspace to output right


  #
  # Layout stuff:
  #
  # You can "split" the current object of your focus with
  # $mod+b or $mod+v, for horizontal and vertical splits
  # respectively.
  bindsym $mod+b splith
  bindsym $mod+v splitv

  # Make the current focus fullscreen
  bindsym $mod+f fullscreen

  # Toggle the current focus between tiling and floating mode
  bindsym $mod+Shift+space floating toggle

  # Swap focus between the tiling area and the floating area
  bindsym $mod+space focus mode_toggle

  # Move focus to the parent container
  bindsym $mod+a focus parent

  #
  # Scratchpad:
  #
  # Sway has a "scratchpad", which is a bag of holding for windows.
  # You can send windows there and get them back later.

  # Move the currently focused window to the scratchpad
  bindsym $mod+Shift+minus move scratchpad

  # Show the next scratchpad window or hide the focused scratchpad window.
  # If there are multiple scratchpad windows, this command cycles through them.
  bindsym $mod+minus scratchpad show
  #
  # Resizing containers:
  #
  mode "resize" {
      bindsym $left resize shrink width 10px
      bindsym $down resize grow height 10px
      bindsym $up resize shrink height 10px
      bindsym $right resize grow width 10px

      # Return to default mode
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }
  bindsym $mod+Shift+s mode "resize"

  #
  # Status Bar:
  #
  # Read `man 5 sway-bar` for more information about this section.
  bar {
      position top
      swaybar_command waybar
  }

  ### Launch Application
  bindsym Print exec grim -g "$(slurp)" - | ksnip -
  bindsym XF86AudioMute exec /usr/bin/pamixer --toggle-mute
  bindsym XF86AudioLowerVolume exec /usr/bin/pamixer --decrease 5
  bindsym XF86AudioRaiseVolume exec /usr/bin/pamixer --increase 5
  bindsym XF86AudioMicMute exec /usr/bin/pamixer --default-source --toggle-mute
  bindsym XF86AudioPlay exec /usr/bin/playerctl play-pause
  bindsym XF86AudioPrev exec /usr/bin/playerctl previous
  bindsym XF86AudioNext exec /usr/bin/playerctl next
  bindsym XF86MonBrightnessUp exec /usr/bin/brightnessctl set 5%+
  bindsym XF86MonBrightnessDown exec /usr/bin/brightnessctl set 5%-

  ### Dunstctl
  set $dunst_mode "Dunst: [c]lose close_[a]ll [h]istory conte[x]"
  mode $dunst_mode {
      bindsym c exec dunstctl close; mode "default"
      bindsym a exec dunstctl close-all; mode "default"
      bindsym h exec dunstctl history-pop; mode "default"
      bindsym x exec dunstctl context; mode "default"
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }
  bindsym $mod+n mode $dunst_mode

  set $emacs_mode "Emacs Options: [e]macs [b]uffers [d]ired [m]u4e [s]hell [a]genda"
  mode $emacs_mode {
      bindsym e exec emacsclient -c -a ''; mode "default"
      bindsym b exec emacsclient -c -a '' --eval '(ibuffer)'; mode "default"
      bindsym d exec emacsclient -c -a '' --eval '(dired nil)'; mode "default"
      bindsym m exec emacsclient -c -a '' --eval '(mu4e)'; mode "default"
      bindsym s exec emacsclient -c -a '' --eval '(eshell)'; mode "default"
      bindsym a exec emacsclient -c -a '' --eval '(org-agenda)'; mode "default"
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }
  bindsym $mod+d mode $emacs_mode

  set $software_mode "Software Options: [p]df"
  mode $software_mode {
      bindsym p exec /usr/bin/evince; mode "default"
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }
  bindsym $mod+s mode $software_mode

  set $prompt_mode "[p]ass [e]xit action"
  mode $prompt_mode {
      bindsym p exec /usr/bin/passmenu -i; mode "default"
      bindsym e exec /home/liolin/.local/bin/exac; mode "default"
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }
  bindsym $mod+p mode $prompt_mode

  set $system_mode "System (l) lock, (e) logout, (s) suspend, (h) hibernate, (r) reboot, (CTRL+s) shutdown"
  mode $system_mode {
       bindsym l exec --no-startup-id $locker; mode "default"
       bindsym e exec --no-startup-id swaymsg exit; mode "deafult"
       bindsym s exec --no-startup-id $locker -f && sleep 2 && systemctl suspend; mode "default"
       bindsym h exec --no-startup-id $locker -f && sleep 2 && systemctl hibernate; mode "default"
       bindsym r exec --no-startup-id systemctl reboot; mode "default"
       bindsym Ctrl+s exec --no-startup-id systemctl poweroff -i; mode "default"

       # back to normal: Enter or Escape
       bindsym Return mode "default"
       bindsym Escape mode "default"
  }
  bindsym $mod+BackSpace mode $system_mode


  include /etc/sway/config.d/*
#+end_src
** Required Packages                                               :packages:
#+begin_example
sway
swaylock
swayidle
swaybg
dmenu-wayland-git
grim
slurp
ksnip
wofi
#+end_example

* i3
** Variables
#+begin_src conf :tangle ~/.config/i3/config
  ### Variables
  set $mod Mod4
  set $left h
  set $down j
  set $up k
  set $right l
  set $term alacritty
  set $menu rofi -show drun -icon-theme "ePapirus-Dark" -show-icons

  set $ws1 "1: "
  set $ws2 "2: "
  set $ws3 "3: "
  set $ws4 "4: stuff"
  set $ws5 "5: "
  set $ws6 "6: "
  set $ws7 "7: "
  set $ws8 "8: stuff"
  set $ws9 "9: "
  set $ws0 "10: stuff"
#+end_src

** Colors / Design
#+begin_src conf :tangle ~/.config/i3/config
  ### Colors
  #client.focused          #6272A4 #6272A4 #F8F8F2 #6272A4   #6272A4
  client.focused          #6272A4 #6272A4 #F8F8F2 #9AB973 #6272A4
  client.focused_inactive #44475A #44475A #F8F8F2 #44475A   #44475A
  client.unfocused        #282A36 #282A36 #BFBFBF #282A36   #282A36
  client.urgent           #44475A #FF5555 #F8F8F2 #FF5555   #FF5555
  client.placeholder      #282A36 #282A36 #F8F8F2 #282A36   #282A36
  client.background       #F8F8F2

  default_border pixel 3
  for_window [class="^.*"] border pixel 3
  for_window [window_role="pop-up"] floating enable
  for_window [window_role="task_dialog"] floating enable
#+end_src

** Others
#+begin_src conf :tangle ~/.config/i3/config
  ### Set WM Name
  exec wmname LG3D

  ### Autostart
  exec_always bash /home/liolin/.config/autostart.sh

  ## Go back to previous workspace with the same keybinding
  workspace_auto_back_and_forth yes

  floating_modifier $mod
#+end_src
** assign
#+begin_src conf :tangle ~/.config/i3/config
  assign [class="Chromium"] $ws6
#+end_src
** Keybindings

#+begin_src conf :tangle ~/.config/i3/config
  bindsym $mod+Return exec $term
  bindsym $mod+Shift+c kill
  # Start your launcher
  bindsym $mod+r exec $menu
  bindsym $mod+Shift+r reload

  bindsym $mod+$left focus left
  bindsym $mod+$down focus down
  bindsym $mod+$up focus up
  bindsym $mod+$right focus right
  bindsym $mod+w focus output left
  bindsym $mod+e focus output right

  bindsym $mod+Shift+$left move left
  bindsym $mod+Shift+$down move down
  bindsym $mod+Shift+$up move up
  bindsym $mod+Shift+$right move right

  bindsym $mod+1 workspace $ws1
  bindsym $mod+2 workspace $ws2
  bindsym $mod+3 workspace $ws3
  bindsym $mod+4 workspace $ws4
  bindsym $mod+5 workspace $ws5
  bindsym $mod+6 workspace $ws6
  bindsym $mod+7 workspace $ws7
  bindsym $mod+8 workspace $ws8
  bindsym $mod+9 workspace $ws9
  bindsym $mod+0 workspace $ws0
  bindsym $mod+Shift+1 move container to workspace $ws1
  bindsym $mod+Shift+2 move container to workspace $ws2
  bindsym $mod+Shift+3 move container to workspace $ws3
  bindsym $mod+Shift+4 move container to workspace $ws4
  bindsym $mod+Shift+5 move container to workspace $ws5
  bindsym $mod+Shift+6 move container to workspace $ws6
  bindsym $mod+Shift+7 move container to workspace $ws7
  bindsym $mod+Shift+8 move container to workspace $ws8
  bindsym $mod+Shift+9 move container to workspace $ws9
  bindsym $mod+Shift+0 move container to workspace $ws0

  bindsym $mod+Shift+w move workspace to output left
  bindsym $mod+Shift+e move workspace to output right


  bindsym $mod+b splith
  bindsym $mod+v splitv

  bindsym $mod+f fullscreen
  bindsym $mod+Shift+space floating toggle
  # Swap focus between the tiling area and the floating area
  bindsym $mod+space focus mode_toggle
  # Move focus to the parent container
  bindsym $mod+a focus parent

  #
  # Scratchpad:
  #
  # Sway has a "scratchpad", which is a bag of holding for windows.
  # You can send windows there and get them back later.

  # Move the currently focused window to the scratchpad
  #bindsym $mod+Shift+minus move scratchpad

  # Show the next scratchpad window or hide the focused scratchpad window.
  # If there are multiple scratchpad windows, this command cycles through them.
  #bindsym $mod+minus scratchpad show

  mode "resize" {
      bindsym $left resize shrink width 10px
      bindsym $down resize grow height 10px
      bindsym $up resize shrink height 10px
      bindsym $right resize grow width 10px

      # Return to default mode
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }
  bindsym $mod+Shift+s mode "resize"


  bindsym Print exec /usr/bin/flameshot gui
  bindsym XF86AudioMute exec /usr/bin/pamixer --toggle-mute
  bindsym XF86AudioLowerVolume exec /usr/bin/pamixer --decrease 5
  bindsym XF86AudioRaiseVolume exec /usr/bin/pamixer --increase 5
  bindsym XF86AudioMicMute exec /usr/bin/pamixer --default-source --toggle-mute
  bindsym XF86AudioPlay exec /usr/bin/playerctl play-pause
  bindsym XF86AudioPrev exec /usr/bin/playerctl previous
  bindsym XF86AudioNext exec /usr/bin/playerctl next
  bindsym XF86MonBrightnessUp exec /usr/bin/brightnessctl set 5%+
  bindsym XF86MonBrightnessDown exec /usr/bin/brightnessctl set 5%-


  set $emacs_mode "Emacs Options: [e]macs [b]uffers [d]ired [m]u4e [s]hell [a]genda"
  mode $emacs_mode {
      bindsym e exec emacsclient -c -a ''; mode "default"
      bindsym b exec emacsclient -c -a '' --eval '(ibuffer)'; mode "default"
      bindsym d exec emacsclient -c -a '' --eval '(dired nil)'; mode "default"
      bindsym m exec emacsclient -c -a '' --eval '(mu4e)'; mode "default"
      bindsym s exec emacsclient -c -a '' --eval '(eshell)'; mode "default"
      bindsym a exec emacsclient -c -a '' --eval '(org-agenda)'; mode "default"
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }
  bindsym $mod+d mode $emacs_mode

  set $software_mode "Software Options: [p]df"
  mode $software_mode {
      bindsym p exec /usr/bin/evince; mode "default"
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }
  bindsym $mod+s mode $software_mode

  set $prompt_mode "[p]ass [e]xit action"
  mode $prompt_mode {
      bindsym p exec /usr/bin/passmenu -i; mode "default"
      bindsym e exec /home/liolin/.local/bin/exac; mode "default"
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }
  bindsym $mod+p mode $prompt_mode

  set $mode_system System (l) lock, (e) logout, (s) suspend, (h) hibernate, (r) reboot, (CTRL+s) shutdown
  mode "$mode_system" {
      bindsym l exec --no-startup-id xsecurelock; mode "default"
      bindsym e exec --no-startup-id i3-msg exit; mode "deafult"
      bindsym s exec --no-startup-id xsecurelock -- systemctl suspend; mode "default"
      bindsym h exec --no-startup-id xsecurelock -- systemctl hibernate; mode "default"
      bindsym r exec --no-startup-id systemctl reboot; mode "default"
      bindsym Ctrl+s exec --no-startup-id systemctl poweroff -i; mode "default"

      # back to normal: Enter or Escape
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }

  bindsym $mod+BackSpace mode "$mode_system"

  set $mode_display Monitor (h) home, (m) mobile
  mode "$mode_display" {
      bindsym h exec --no-startup-id xrandr --output eDP1 --mode 1280x720 --pos 2560x0 --rotate normal --output DP1 --off --output HDMI1 --primary --mode 2560x1440 --pos 0x0 --rotate normal --output HDMI2 --off --output VIRTUAL1 --off; mode "default"
      bindsym m exec --no-startup-id xrandr --output eDP1 --mode 1920x1080 --pos 0x0 --rotate normal --output DP1 --off --output HDMI1 --off --output HDMI2 --off --output VIRTUAL1 --off; mode "deafult"

      # back to normal: Enter or Escape
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }
  bindsym $mod+x mode "$mode_display"
#+end_src
	  
** Bar
#+begin_src conf :tangle ~/.config/i3/config
  bar {
      font pango:DejaVu Sans Mono, FontAwesome 12
      position bottom
      status_command /sbin/i3status-rs ~/.config/i3status-rust/config.toml
      colors {
	  separator #666666
	  background #222222
	  statusline #dddddd
	  focused_workspace #0088CC #0088CC #ffffff
	  active_workspace #333333 #333333 #ffffff
	  inactive_workspace #333333 #333333 #888888
	  urgent_workspace #2f343a #900000 #ffffff
      }
  }
#+end_src

** i3status-rust
#+begin_src toml :tangle ~/.config/i3status-rust/config.toml
  icons_format = "{icon}"

  [theme]
  theme = "nord-dark"

  [icons]
  icons = "awesome4"

  [[block]]
  block = "focused_window"

  [[block]]
  block = "disk_space"
  path = "/"
  info_type = "available"
  alert_unit = "GB"
  interval = 20
  warning = 20.0
  alert = 10.0

  [[block]]
  block = "memory"
  format = " $icon $mem_used.eng(prefix:M)/$mem_total.eng(prefix:M)($mem_used_percents.eng(w:2)) "

  [[block]]
  block = "cpu"
  interval = 1

  [[block]]
  block = "load"
  interval = 1

  [[block]]
  block = "sound"
  [[block.click]]
  button = "left"
  cmd = "/usr/bin/pamixer --toggle-mute"

  [[block]]
  block = "time"
  interval = 5

  [[block]]
  block = "battery"
  if_command = "test -e /sys/class/power_supply/BAT0"

#+end_src
** Required Packages                                               :packages:
#+begin_example
i3
i3status-rust
pamixer
brightnessctl
#+end_example
* Hyprland
#+begin_src conf :tangle ~/.config/hypr/hyprland.conf
  # See https://wiki.hyprland.org/Configuring/Monitors/
  monitor=HDMI-A-1, 2560x1440, 0x0, 1
  monitor=eDP-1, 1920x1080, 2560x0, 1


  # See https://wiki.hyprland.org/Configuring/Keywords/ for more

  # Execute your favorite apps at launch
  # exec-once = waybar & hyprpaper & firefox
  exec-once = waybar & dunst & nm-applet & playerctld daemon & owncloud
  exec-once = /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1

  $locker = swaylock -k -l -i ~/Pictures/wall_anime_8K.png

  # Source a file (multi-file configs)
  # source = ~/.config/hypr/myColors.conf

  # Some default env vars.
  env = XCURSOR_SIZE,24

  # For all categories, see https://wiki.hyprland.org/Configuring/Variables/
  input {
      kb_layout = us
      kb_variant = altgr-intl
      kb_model =
      kb_options = caps:ctrl_modifier
      kb_rules =

      follow_mouse = 1

      touchpad {
          natural_scroll = no
      }

      sensitivity = 0 # -1.0 - 1.0, 0 means no modification.
  }

  general {
      # See https://wiki.hyprland.org/Configuring/Variables/ for more

      gaps_in = 2
      gaps_out = 1
      border_size = 2
      col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
      col.inactive_border = rgba(595959aa)

      layout = dwindle
  }

  decoration {
      # See https://wiki.hyprland.org/Configuring/Variables/ for more

      rounding = 0

      blur {
      	 enabled = yes
      	 size = 3
      	 passes = 1
      	 new_optimizations = on
      }

      drop_shadow = yes
      shadow_range = 4
      shadow_render_power = 3
      col.shadow = rgba(1a1a1aee)
  }

  animations {
      enabled = false

      # Some default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more

      bezier = myBezier, 0.05, 0.9, 0.1, 1.05

      animation = windows, 1, 7, myBezier
      animation = windowsOut, 1, 7, default, popin 80%
      animation = border, 1, 10, default
      animation = borderangle, 1, 8, default
      animation = fade, 1, 7, default
      animation = workspaces, 1, 6, default
  }

  dwindle {
      # See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
      pseudotile = yes # master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
      preserve_split = yes # you probably want this
  }

  master {
      # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
      new_is_master = true
  }

  gestures {
      # See https://wiki.hyprland.org/Configuring/Variables/ for more
      workspace_swipe = off
  }

  # Example per-device config
  # See https://wiki.hyprland.org/Configuring/Keywords/#executing for more
  device:epic-mouse-v1 {
      sensitivity = -0.5
  }

  binds {
      workspace_back_and_forth = true
  }

  # Example windowrule v1
  # windowrule = float, ^(kitty)$
  # Example windowrule v2
  # windowrulev2 = float,class:^(kitty)$,title:^(kitty)$
  # See https://wiki.hyprland.org/Configuring/Window-Rules/ for more


  # See https://wiki.hyprland.org/Configuring/Keywords/ for more
  $mainMod = SUPER
  $left = h
  $up = k
  $right = l
  $down = j

  ## General keybindings
  bind = $mainMod, RETURN, exec, alacritty
  bind = $mainMod SHIFT, C, killactive, 
  bind = $mainMod, R, exec, wofi --allow-images --show drun
  bind = $mainMod SHIFT, Q, exit, 
  bind = $mainMod, SPACE, togglefloating,
  bind = $mainMod, F, fullscreen
  #bind = $mainMod, P, pseudo, # dwindle
  #bind = $mainMod, J, togglesplit, # dwindle

  ## Move and focus keybindings
  # Move focus using home row for window and W / E for monitor
  bind = $mainMod, $right, movefocus, r
  bind = $mainMod, $up, movefocus, u
  bind = $mainMod, $down, movefocus, d
  bind = $mainMod, $left, movefocus, l
  bind = $mainMod, W, focusmonitor, -1
  bind = $mainMod, E, focusmonitor, +1

  # Move window using home row
  bind = $mainMod SHIFT, $right, movewindow, r
  bind = $mainMod SHIFT, $up, movewindow, u
  bind = $mainMod SHIFT, $down, movewindow, d
  bind = $mainMod SHIFT, $left, movewindow, l

  # Switch workspaces with mainMod + [0-9]
  bind = $mainMod, 1, workspace, 1
  bind = $mainMod, 2, workspace, 2
  bind = $mainMod, 3, workspace, 3
  bind = $mainMod, 4, workspace, 4
  bind = $mainMod, 5, workspace, 5
  bind = $mainMod, 6, workspace, 6
  bind = $mainMod, 7, workspace, 7
  bind = $mainMod, 8, workspace, 8
  bind = $mainMod, 9, workspace, 9
  bind = $mainMod, 0, workspace, 10

  # Move active window to a workspace with mainMod + SHIFT + [0-9]
  bind = $mainMod SHIFT, 1, movetoworkspacesilent, 1
  bind = $mainMod SHIFT, 2, movetoworkspacesilent, 2
  bind = $mainMod SHIFT, 3, movetoworkspacesilent, 3
  bind = $mainMod SHIFT, 4, movetoworkspacesilent, 4
  bind = $mainMod SHIFT, 5, movetoworkspacesilent, 5
  bind = $mainMod SHIFT, 6, movetoworkspacesilent, 6
  bind = $mainMod SHIFT, 7, movetoworkspacesilent, 7
  bind = $mainMod SHIFT, 8, movetoworkspacesilent, 8
  bind = $mainMod SHIFT, 9, movetoworkspacesilent, 9
  bind = $mainMod SHIFT, 0, movetoworkspacesilent, 10

  # Move active workspace to monitor
  bind = $mainMod SHIFT, W, movecurrentworkspacetomonitor, -1 
  bind = $mainMod SHIFT, E, movecurrentworkspacetomonitor, +1

  # Mouse Bindings
  bindm=ALT,mouse:272,movewindow

  ## Resize (does noething currently)
  bind = $mainMod SHIFT, S, submap,resize
  submap=resize
  bind = ,J, resizeactive, -10
  bind = ,K, resizeactive, +10

  bind = ,escape,submap,reset
  bind = ,return,submap,reset
  submap=reset


  ## Applications
  # Emacs
  $emacsMode = Emacs Options: [e]macs [b]uffers [d]ired [m]u4e [s]hell [a]genda
  bind = $mainMod,D,submap,$emacsMode
  submap=$emacsMode
  bind = ,E, exec, emacsclient -c -a ''
  bind = ,B, exec, emacsclient -c -a '' --eval '(ibuffer)'
  bind = ,D, exec, emacsclient -c -a '' --eval '(dired nil)'
  bind = ,M, exec, emacsclient -c -a '' --eval '(mu4e)'
  bind = ,S, exec, emacsclient -c -a '' --eval '(eshell)'
  bind = ,A, exec, emacsclient -c -a '' --eval '(org-agenda)'

  bind = ,E,submap,reset
  bind = ,B,submap,reset
  bind = ,D,submap,reset
  bind = ,M,submap,reset
  bind = ,S,submap,reset
  bind = ,A,submap,reset
  bind = ,escape,submap,reset
  bind = ,return,submap,reset
  submap = reset


  # Start general applications
  $softwareMode = Software Options: [p]df
  bind = $mainMod,S,submap,$softwareMode
  submap = $softwareMode
  bind = ,P, exec, evince

  bind = ,P,submap,reset
  bind = ,escape,submap,reset
  bind = ,return,submap,reset
  submap = reset

  # Start prompts
  $promptMode = [p]ass [e]xit action
  bind = $mainMod,P,submap,$promptMode
  submap = $promptMode
  bind = ,P, exec, passmenu -i
  bind = ,E, exec, exac

  bind = ,P,submap,reset
  bind = ,E,submap,reset
  bind = ,escape,submap,reset
  bind = ,return,submap,reset
  submap = reset

  # Launch Powermenu
  $systemMode = System (l) lock, (e) logout, (s) suspend, (h) hibernate, (r) reboot, (CTRL+s) shutdown
  bind = $mainMod,BACKSPACE,submap,$systemMode
  submap = $systemMode
  bind = ,L, exec, $locker
  bind = ,E, exec, exit
  bind = ,S, exec, $locker -f && sleep 2 && systemctl suspend
  bind = ,H, exec, $locker -f && sleep 2 && systemctl hibernate
  bind = ,R, exec, systemctl reboot
  bind = CTRL,S, exec, systemctl poweroff -i

  bind = ,L,submap,reset
  bind = ,E,submap,reset
  bind = ,S,submap,reset
  bind = ,H,submap,reset
  bind = ,R,submap,reset
  bind = CTRL,S,submap,reset
  bind = ,escape,submap,reset
  bind = ,return,submap,reset
  submap = reset

  ## Multimedia
  bind = $mainMod,Print, exec, grim -g "$(slurp)" - | wl-copy
  bind = ,Print, exec, grim -g "$(slurp)"
  bind = ,XF86AudioMute, exec, /usr/bin/pamixer --toggle-mute
  bind = ,XF86AudioLowerVolume, exec, /usr/bin/pamixer --decrease 5
  bind = ,XF86AudioRaiseVolume, exec, /usr/bin/pamixer --increase 5
  bind = ,XF86AudioMicMute, exec, /usr/bin/pamixer --default-source --toggle-mute
  bind = ,XF86AudioPlay, exec, /usr/bin/playerctl play-pause
  bind = ,XF86AudioPrev, exec, /usr/bin/playerctl previous
  bind = ,XF86AudioNext, exec, /usr/bin/playerctl next
  bind = ,XF86MonBrightnessUp, exec, /usr/bin/brightnessctl set 5%+
  bind = ,XF86MonBrightnessDown, exec, /usr/bin/brightnessctl set 5%-

#+end_src

** dmenu-wl
#+begin_src sh :tangle ~/.local/bin/dmenu-wl :tangle-mode (identity #o555)
  #!/usr/bin/env bash
  set -Eeu
  wofi --dmenu "$@"
#+end_src
** Required Packages                                               :packages:
#+begin_example
hyprland
pipewire
wireplumber
pipewire-alsa
pipewire-pulse
xdg-desktop-portal-hyprland
qt5-wayland
qt6-wayland
waybar
wofi
nwg-look
wl-clipboard
create dmenu-wl script (=wofi --dmenu "$@"=)
#+end_example

* Waybar
** Config
#+begin_src json :tangle ~/.config/waybar/config
  {
    "height": 30, // Waybar height (to be removed for auto height)
    "position": "bottom",
    "layer": "top",
    "modules-left": ["sway/workspaces"],
    "modules-center": ["sway/mode", "sway/window"],
    "modules-right": ["idle_inhibitor", "wireplumber", "network", "sway/language", "battery", "clock", "tray"],

    
    "sway/workspaces": {
      "sort-by-number": true,
      "format": "{name}: {icon}",
      "format-icons": {
        "1": "",
        "2": "",
        "3": " ",
        "4": "",
        "5": "",
        "6": "",
        "7": "",
        "8": "",
        "9": "",
        "10": "",
        "urgent": "",
        "default": ""
      },
      "on-scroll-up": "hyprctl dispatch workspace e+1",
      "on-scroll-down": "hyprctl dispatch workspace e-1",
      "on-click": "activate"

    },


    "hyprland/workspaces": {
      "sort-by-number": true,
      "format": "{name}: {icon}",
      "format-icons": {
        "1": "",
        "2": "",
        "3": " ",
        "4": "",
        "5": "",
        "6": "",
        "7": "",
        "8": "",
        "9": "",
        "10": "",
        "urgent": "",
        "default": ""
      },
      "on-scroll-up": "hyprctl dispatch workspace e+1",
      "on-scroll-down": "hyprctl dispatch workspace e-1",
      "on-click": "activate"

    },
    "hyprland/submap": {
      "format": "<span style=\"italic\">{}</span>",
      "tooltip": false
    },
    "sway/mode": {
      "format": "<span style=\"italic\">{}</span>",
      "tooltip": false
    },
    "keyboard-state": {
      "numlock": true,
      "capslock": true,
      "format": "{name} {icon}",
      "format-icons": {
        "locked": "",
        "unlocked": ""
      }
    },
    "sway/mode": {
      "format": "<span style=\"italic\">{}</span>"
    },
    "idle_inhibitor": {
      "format": "{icon}",
      "format-icons": {
        "activated": "",
        "deactivated": ""
      }
    },
    "tray": {
      // "icon-size": 21,
      "spacing": 10
    },
    "clock": {
      "timezone": "Europe/Zurich",
      "tooltip-format": "<big>{:%Y %B}</big>\n<tt><small>{calendar}</small></tt>",
      "format": "{:%Y-%m-%d %H:%M}",
    },
    "battery": {
      "states": {
        // "good": 95,
        "warning": 30,
        "critical": 15
      },
      "format": "{capacity}% {icon}",
      "format-charging": "{capacity}% ",
      "format-plugged": "{capacity}% ",
      "format-alt": "{time} {icon}",
      "format-icons": ["", "", "", "", ""]
    },
    "network": {
      "format-wifi": "{essid} ({signalStrength}%) ",
      "format-ethernet": "{ipaddr}/{cidr} ",
      "tooltip-format": "{ifname} via {gwaddr} ",
      "format-linked": "{ifname} (No IP) ",
      "format-disconnected": "Disconnected ⚠",
      "format-alt": "{ifname}: {ipaddr}/{cidr}"
    },
    "pulseaudio": {
      // "scroll-step": 1, // %, can be a float
      "format": "{volume}% {icon} {format_source}",
      "format-bluetooth": "{volume}% {icon} {format_source}",
      "format-bluetooth-muted": " {icon} {format_source}",
      "format-muted": " {format_source}",
      "format-source": "{volume}% ",
      "format-source-muted": "",
      "format-icons": {
        "headphone": "",
        "hands-free": "",
        "headset": "",
        "phone": "",
        "portable": "",
        "car": "",
        "default": ["", "", ""]
      },
    },
    "wireplumber": {
      "format": "{volume}% {icon}",
      "format-muted": "",
      "format-icons": ["", "", ""]
    }
  }


#+end_src
** Style
#+begin_src css :tangle ~/.config/waybar/style.css
  ,* {
      /* `otf-font-awesome` is required to be installed for icons */
      font-family: Roboto, Helvetica, Arial, sans-serif;
      font-size: 13px;
  }

  window#waybar {
      background-color: rgba(43, 48, 59, 0.5);
      border-bottom: 3px solid rgba(100, 114, 125, 0.5);
      color: #ffffff;
      transition-property: background-color;
      transition-duration: .5s;
  }

  window#waybar.hidden {
      opacity: 0.2;
  }

  window#waybar.termite {
      background-color: #3F3F3F;
  }

  window#waybar.chromium {
      background-color: #000000;
      border: none;
  }

  #workspaces button {
      padding: 0 5px;
      background-color: transparent;
      color: #ffffff;
      /* Use box-shadow instead of border so the text isn't offset */
      box-shadow: inset 0 -3px transparent;
      /* Avoid rounded borders under each workspace name */
      border: none;
      border-radius: 0;
  }

  #workspaces button:hover {
      background: rgba(0, 0, 0, 0.2);
      box-shadow: inset 0 -3px #ffffff;
  }

  #workspaces button.focused,
  #workspaces button.active {
      background-color: #7D6F64;
      box-shadow: inset 0 -3px #ffffff;
  }

  #workspaces button.urgent {
      background-color: #eb4d4b;
  }

  #mode {
      background-color: #64727D;
      border-bottom: 3px solid #ffffff;
  }

  #clock,
  #battery,
  #cpu,
  #memory,
  #disk,
  #temperature,
  #backlight,
  #network,
  #pulseaudio,
  #wireplumber,
  #custom-media,
  #tray,
  #mode,
  #idle_inhibitor,
  #language,
  #keyboard-state,
  #mpd {
      padding: 0 10px;
      color: #ffffff;
  }

  #window,
  #workspaces {
      padding: 0 10px 0 0;
      margin: 0 4px;
  }

  /* If workspaces is the leftmost module, omit left margin */
  .modules-left > widget:first-child > #workspaces {
      margin-left: 0;
  }

  /* If workspaces is the rightmost module, omit right margin */
  .modules-right > widget:last-child > #workspaces {
      margin-right: 0;
  }

  #clock {
      background-color: #64727D;
  }

  #battery {
      background-color: #ffffff;
      color: #000000;
  }

  #battery.charging, #battery.plugged {
      color: #ffffff;
      background-color: #26A65B;
  }

  @keyframes blink {
      to {
  	  background-color: #ffffff;
  	  color: #000000;
      }
  }

  #battery.critical:not(.charging) {
      background-color: #f53c3c;
      color: #ffffff;
      animation-name: blink;
      animation-duration: 0.5s;
      animation-timing-function: linear;
      animation-iteration-count: infinite;
      animation-direction: alternate;
  }

  label:focus {
      background-color: #000000;
  }

  #cpu {
      background-color: #2ecc71;
      color: #000000;
  }

  #memory {
      background-color: #9b59b6;
  }

  #disk {
      background-color: #964B00;
  }

  #backlight {
      background-color: #90b1b1;
  }

  #network {
      background-color: #2980b9;
  }

  #network.disconnected {
      background-color: #f53c3c;
  }

  #pulseaudio {
      background-color: #f1c40f;
      color: #000000;
  }

  #pulseaudio.muted {
      background-color: #90b1b1;
      color: #2a5c45;
  }

  #custom-media {
      background-color: #66cc99;
      color: #2a5c45;
      min-width: 100px;
  }

  #custom-media.custom-spotify {
      background-color: #66cc99;
  }

  #custom-media.custom-vlc {
      background-color: #ffa000;
  }

  #temperature {
      background-color: #f0932b;
  }

  #temperature.critical {
      background-color: #eb4d4b;
  }

  #tray {
      background-color: #2980b9;
  }

  #tray > .passive {
      -gtk-icon-effect: dim;
  }

  #tray > .needs-attention {
      -gtk-icon-effect: highlight;
      background-color: #eb4d4b;
  }

  #idle_inhibitor {
      background-color: #2d3436;
  }

  #idle_inhibitor.activated {
      background-color: #ecf0f1;
      color: #2d3436;
  }

  #mpd {
      background-color: #66cc99;
      color: #2a5c45;
  }

  #mpd.disconnected {
      background-color: #f53c3c;
  }

  #mpd.stopped {
      background-color: #90b1b1;
  }

  #mpd.paused {
      background-color: #51a37a;
  }

  #language {
      background: #00b093;
      color: #740864;
      min-width: 16px;
  }

  #keyboard-state {
      background: #97e1ad;
      color: #000000;
      min-width: 16px;
  }

  #keyboard-state > label {
      padding: 0 5px;
  }

  #keyboard-state > label.locked {
      background: rgba(0, 0, 0, 0.2);
  }

#+end_src
* lxsession
#+begin_src conf :tangle ~/.config/systemd/user/lxsession.service
  [Unit]
  Description=lxsession - polkit

  [Service]
  Type=simple
  ExecStart=/usr/bin/lxpolkit
  ExecStop=/usr/bin/killall lxpolkit
  Restart=on-failure

  [Install]
  WantedBy=default.target
#+end_src

** Required Packages                                               :packages:
#+begin_example
polkit 
lxsession 
#+end_example

* mailsignature
#+begin_src conf :tangle ~/.signature
  Olivier Lischer
  Ersalinstrasse 3
  7411 Sils im Domleschg
  olivier.lischer@liolin.ch
  keybase.io: liolin
#+end_src

* mbsync
** olivier.lischer@liolin.ch
#+begin_src conf :tangle ~/.mbsyncrc
  IMAPAccount olivier.lischer@liolin.ch
  # Address to connect to
  Host imap.mail.hostpoint.ch
  User olivier.lischer@liolin.ch
  # To store the password in an encrypted file use PassCmd instead of Pass
  PassCmd "pass show Privat/Communication/Mail/olivier.lischer@liolin.ch | head -n1"
  #PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.mailpass.gpg"
  #
  # Use SSL
  SSLType IMAPS
  # The following line should work. If get certificate errors, uncomment the two following lines and read the "Troubleshooting" section.
  CertificateFile /etc/ssl/certs/ca-certificates.crt
  #CertificateFile ~/.cert/imap.gmail.com.pem
  #CertificateFile ~/.cert/Equifax_Secure_CA.pem

  IMAPStore olivier.lischer@liolin.ch-remote
  Account olivier.lischer@liolin.ch

  MaildirStore olivier.lischer@liolin.ch-local
  Subfolders Verbatim
  # The trailing "/" is important
  Path ~/.mail/liolin/
  Inbox ~/.mail/liolin/Inbox

  Channel olivier.lischer@liolin.ch
  Far :olivier.lischer@liolin.ch-remote:
  Near :olivier.lischer@liolin.ch-local:
  Patterns * 
  Create Both
  SyncState *
  Expunge Both
  CopyArrivalDate yes
#+end_src
** notes@liolin.ch
#+begin_src conf :tangle ~/.mbsyncrc
  IMAPAccount notes@liolin.ch
  # Address to connect to
  Host imap.mail.hostpoint.ch
  User notes@liolin.ch
  # To store the password in an encrypted file use PassCmd instead of Pass
  PassCmd "pass show Privat/Communication/Mail/notes@liolin.ch | head -n1"
  #
  # Use SSL
  SSLType IMAPS
  # The following line should work. If get certificate errors, uncomment the two following lines and read the "Troubleshooting" section.
  CertificateFile /etc/ssl/certs/ca-certificates.crt

  IMAPStore notes@liolin.ch-remote
  Account notes@liolin.ch

  MaildirStore notes@liolin.ch-local
  Subfolders Verbatim
  # The trailing "/" is important
  Path ~/.mail/notes/
  Inbox ~/.mail/notes/Inbox

  Channel notes@liolin.ch
  Far :notes@liolin.ch-remote:
  Near :notes@liolin.ch-local:
  Patterns * 
  Create Both
  SyncState *
  Expunge Both
  CopyArrivalDate yes
#+end_src

** olivier.lischer.blong@gmail.com
#+begin_src conf :tangle ~/.mbsyncrc
  IMAPAccount olivier.lischer.blon@gmail.com
  # Address to connect to
  Host imap.gmail.com
  User olivier.lischer.blon@gmail.com
  PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.gmail_mailpass.gpg"
  #
  # Use SSL
  SSLType IMAPS
  # The following line should work. If get certificate errors, uncomment the two following lines and read the "Troubleshooting" section.
  CertificateFile /etc/ssl/certs/ca-certificates.crt
  #CertificateFile ~/.cert/imap.gmail.com.pem
  #CertificateFile ~/.cert/Equifax_Secure_CA.pem

  IMAPStore olivier.lischer.blon@gmail.com-remote
  Account olivier.lischer.blon@gmail.com

  MaildirStore olivier.lischer.blon@gmail.com-local
  Subfolders Verbatim
  #The trailing "/" is important
  Path ~/.mail/gmail/
  Inbox ~/.mail/gmail/Inbox

  Channel olivier.lischer.blon@gmail.com
  Far :olivier.lischer.blon@gmail.com-remote:
  Near :olivier.lischer.blon@gmail.com-local:
  Patterns *
  Create Both
  Expunge Both
  SyncState *
  CopyArrivalDate yes
#+end_src

** Required Packages                                               :packages:
#+begin_example
isync
#+end_example

* mu
** emacsmail
#+begin_src sh :tangle ~/.local/bin/emacsmail :tangle-mode (identity #o555)
  emacsclient -c --eval "(liolin/mailto \"$@\")"
#+end_src
** emacsclient-mail.desktop
#+begin_src conf :tangle ~/.local/share/applications/emacsclient-mail.desktop
[Desktop Entry]
Categories=Network;Email;
Comment=GNU Emacs is an extensible, customizable text editor - and more
Exec=/home/liolin/.local/bin/emacsmail
Icon=emacs
Name=Emacs (Mail, Client)
MimeType=x-scheme-handler/mailto;
NoDisplay=true
Terminal=false
Type=Application
Keywords=emacsclient;
Actions=new-window;new-instance;
#+end_src
** Required Packages                                               :packages:
#+begin_example
mu
meson
ninja
#+end_example

* picom
#+begin_src conf :tangle ~/.config/picom.conf
  # Shadow
  shadow = true;
  # no-dnd-shadow = true;
  # no-dock-shadow = true;
  detect-rounded-corners = true;
  shadow-radius = 5;
  shadow-offset-x = 1;
  shadow-offset-y = 1;
  shadow-opacity = .3;
  shadow-ignore-shaped = false;
  shadow-exclude = [
  "name = 'Notification'", 
  # workaround for conky until it provides window properties:
  "override_redirect = 1 && !WM_CLASS@:s", 
  #	"class_g ?= 'Dunst'", 
  # disable shadows for hidden windows:
  "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
  "_GTK_FRAME_EXTENTS@:c",
  # disables shadows on sticky windows:
  #	"_NET_WM_STATE@:32a *= '_NET_WM_STATE_STICKY'",
  # disables shadows on i3 frames
  "class_g ?= 'i3-frame'"
  ];

  # shadow-exclude-reg = "x10+0+0";
  # xinerama-shadow-crop = true;

  #menu-opacity = 0.95;
  inactive-opacity = 0.93;
  active-opacity = 1;
  #alpha-step = 0.01;
  inactive-dim = 0.0;
  blur-background = false;
  blur-kern = "3x3box";

  fading = false;
  fade-delta = 1;
  fade-in-step = 0.03;
  fade-out-step = 0.03;
  fade-exclude = [ ];

  backend = "xrender";
  mark-wmwin-focused = true;
  mark-ovredir-focused = true;
  detect-client-opacity = true;
  unredir-if-possible = true;
  vsync = true;
  dbe = false;
  #paint-on-overlay = true;
  focus-exclude = [ "class_g = 'Cairo-clock'" ];
  detect-transient = true;
  detect-client-leader = true;
  invert-color-include = [ ];
  #glx-copy-from-front = false;
  #glx-swap-method = "undefined";
  use-damage = true

  opacity-rule = [ 
  "99:name *?= 'Call'", 
  "99:class_g = 'Chromium'", 
  "99:name *?= 'Conky'", 
  "99:class_g = 'Darktable'", 
  "50:class_g = 'Dmenu'", 
  "99:name *?= 'Event'", 
  "99:class_g = 'Firefox' && focused",
  "99:name *?= 'Firefox' && focused",
  "99:class_g = 'Firefox' && !focused",
  "99:name *?= 'Firefox' && !focused",
  "99:class_g = 'GIMP'", 
  "99:name *?= 'Image'",
  "99:class_g = 'Lazpaint'", 
  "99:class_g = 'Midori'", 
  "99:name *?= 'Minitube'", 
  "99:class_g = 'Mousepad'",
  "99:name *?= 'MuseScore'", 
  "90:name *?= 'Page Info'", 
  "99:name *?= 'Pale Moon'", 
  "90:name *?= 'Panel'", 
  "99:class_g = 'Pinta'", 
  "90:name *?= 'Restart'", 
  "99:name *?= 'sudo'", 
  "99:name *?= 'Screenshot'", 
  "99:class_g = 'Viewnior'", 
  "99:class_g = 'VirtualBox'", 
  "99:name *?= 'VLC'", 
  "99:name *?= 'Write'", 
  "99:class_g = 'teams-for-linux'",
  "99:class_g = 'teams'",
  "99:class_g = 'jetbrains-idea'",
  "93:class_g = 'URxvt' && !_NET_WM_STATE@:32a",
  "0:_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'", 
  "96:_NET_WM_STATE@:32a *= '_NET_WM_STATE_STICKY'" 
  ];

  wintypes : 
  {
  tooltip : 
  {
  fade = true;
  shadow = false;
  opacity = 0.85;
  focus = true;
  };
  fullscreen : 
  {
  fade = true;
  shadow = false;
  opacity = 1;
  focus = true;
  };
  };
#+end_src

** Required Packages                                               :packages:
#+begin_example
picom
#+end_example

* TODO polybar
** Configuration
*** Colors
#+begin_src conf :tangle ~/.config/polybar/config
  [colors]
  background = #222
  background-alt = #444
  foreground = #dfdfdf
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053

  underline = #97bbf7

  ; signa colors
  alert = #f90000
  warning = #f44336
  notice = #8bc34a
  ok = #4caf50
#+end_src

*** Settings
#+begin_src conf :tangle ~/.config/polybar/config
  [settings]
  screenchange-reload = true
#+end_src
*** Global
**** wm
#+begin_src conf :tangle ~/.config/polybar/config
  [global/wm]
  margin-top = 5
  margin-bottom = 5
#+end_src
*** Bars
**** default
#+begin_src conf :tangle ~/.config/polybar/config
  [bar/default]
  width = 100%
  height = 27
  radius = 6.0
  fixed-center = false

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 3
  line-color = #f00

  border-size = 4
  border-color = #00000000

  padding-left = 0
  padding-right = 2

  module-margin-left = 1
  module-margin-right = 2

  font-0 = fixed:pixelsize=10;1
  font-1 = unifont:fontformat=truetype:size=8:antialias=false;0
  font-2 = Font Awesome 5 Free:pixelsize=10;3
  font-3 = Font Awesome 5 Free Solid:pixelsize=10;3
  font-4 = Font Awesome 5 Brands:pixelsize=10;3
  font-5 = Material Icons:style=Regular

  modules-left = xmonad
  modules-right = filesystem pulseaudio xkeyboard backlight wlan eth battery temperature date

  tray-position = right
  tray-padding = 2

  cursor-click = pointer
  cursor-scroll = ns-resize
#+end_src

*** Modules
**** xmonad
#+begin_src conf :tangle ~/.config/polybar/config
  [module/xmonad]
  type = custom/script
  exec = /home/liolin/bin/xmonad-log
  tail = true
#+end_src

**** backlight
#+begin_src conf :tangle ~/.config/polybar/config
  [module/backlight]
  type = internal/backlight
  format = <label> <bar>
  label =  %percentage%%

  ; Only applies if <bar> is used
  bar-width = 10
  bar-indicator = |
  bar-fill = ─
  bar-empty = ─

  card = intel_backlight
  ;enable-scroll = true
#+end_src
**** xwindow
#+begin_src conf :tangle ~/.config/polybar/config
  [module/xwindow]
  type = internal/xwindow
  label = %title:0:30:...%
#+end_src

**** xkeyboard
#+begin_src conf :tangle ~/.config/polybar/config
  [module/xkeyboard]
  type = internal/xkeyboard
  blacklist-0 = num lock

  format-prefix = " "
  format-prefix-foreground = ${colors.foreground-alt}
  format-prefix-underline = #ffc299

  label-layout = %layout%
  label-layout-underline = #ffc299

  label-indicator-padding = 2
  label-indicator-margin = 1
  label-indicator-background = ${colors.secondary}
  label-indicator-underline = #ffc299
#+end_src

**** TODO filesystem
#+NAME: mount-points
#+begin_src emacs-lisp :noweb yes
  (let ((devices '(("COLA" . ("mount-0 = /"))
		   ("SPRITE" . ("mount-0 = /"
				"mount-1 = /"))
		   ("BERGAMOTTE" . ("mount-0 = /")))))
    (string-join (cdr (assoc (system-name) devices)) "\n"))
#+end_src

#+begin_src conf :tangle ~/.config/polybar/config :noweb yes
  [module/filesystem]
  type = internal/fs
  interval = 25

  <<mount-points()>>

  label-mounted = %{F#0a81f5}%mountpoint%%{F-}: %percentage_used%%
  label-unmounted = %mountpoint% not mounted
  label-unmounted-foreground = ${colors.foreground-alt}
#+end_src

**** cpu
#+begin_src conf :tangle ~/.config/polybar/config
  [module/cpu]
  type = internal/cpu
  interval = 2
  format-prefix = " "
  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = #ff944d
  label = %percentage:2%%
#+end_src

**** memory
#+begin_src conf :tangle ~/.config/polybar/config
  [module/memory]
  type = internal/memory
  interval = 2
  format-prefix = "Mem "
  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = #ffa366
  label = %percentage_used%%
#+end_src

**** wlan
#+begin_src conf :tangle ~/.config/polybar/config
  [module/wlan]
  type = internal/network
  interface = wlan0
  interval = 3.0

  format-connected = <ramp-signal> <label-connected>
  format-connected-underline = #ff8533

  label-connected = %essid% / %local_ip%

  format-disconnected =

  ramp-signal-0 =
  ramp-signal-1 = 
  ramp-signal-foreground = ${colors.foreground-alt}
#+end_src

**** eth
#+begin_src conf :tangle ~/.config/polybar/config
  [module/eth]
  type = internal/network
  interface = enp3s0
  interval = 3.0

  format-connected-underline = #55aa55
  format-connected-prefix = " "
  format-connected-prefix-foreground = ${colors.foreground-alt}
  label-connected = %local_ip%

  format-disconnected =
#+end_src
**** date
#+begin_src conf :tangle ~/.config/polybar/config
  [module/date]
  type = internal/date
  interval = 5

  date =
  date-alt = " %Y-%m-%d"

  time = %H:%M
  time-alt = %H:%M:%S

  format-prefix = 
  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = #0a6cf5

  label = %date% %time%
#+end_src
**** pulseaudio
#+begin_src conf :tangle ~/.config/polybar/config
  [module/pulseaudio]
  type = internal/pulseaudio

  format-volume = <label-volume> <bar-volume>
  label-volume =  %percentage%%
  label-volume-foreground = ${root.foreground}

  label-muted = 
  label-muted-foreground = #666

  bar-volume-width = 10
  bar-volume-foreground-0 = #55aa55
  bar-volume-foreground-1 = #55aa55
  bar-volume-foreground-2 = #55aa55
  bar-volume-foreground-3 = #55aa55
  bar-volume-foreground-4 = #55aa55
  bar-volume-foreground-5 = #f5a70a
  bar-volume-foreground-6 = #ff5555
  bar-volume-gradient = false
  bar-volume-indicator = |
  bar-volume-indicator-font = 2
  bar-volume-fill = ─
  bar-volume-fill-font = 2
  bar-volume-empty = ─
  bar-volume-empty-font = 2
  bar-volume-empty-foreground = ${colors.foreground-alt}
#+end_src
**** battery
#+begin_src conf :tangle ~/.config/polybar/config
  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = AC
  full-at = 98

  format-charging = <ramp-capacity> <label-charging>
  format-charging-underline = #ff751a

  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-underline = ${self.format-charging-underline}

  ; format-full-prefix =
  format-full-prefix-foreground = ${colors.foreground-alt}
  ; format-full-underline = ${self.format-charging-underline}
  format-full-underline = ${self.format-charging-underline}

  label-charging = %percentage%%
  label-discharging = %percentage%%

  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 

  ramp-capacity-foreground = ${colors.foreground-alt}
  ramp-capacity-0-foreground = ${colors.alert}
  ramp-capacity-1-foreground = ${colors.warning}
  ramp-capacity-2-foreground = ${colors.notice}
  ramp-capacity-3-foreground = ${colors.ok}
#+end_src
**** temperature
#+begin_src conf :tangle ~/.config/polybar/config
  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60

  format = <ramp> <label>
  format-underline = #ff6600
  format-warn = <ramp> <label-warn>
  format-warn-underline = ${self.format-underline}

  label = %temperature-c%
  label-warn = %temperature-c%
  label-warn-foreground = ${colors.secondary}

  ; ramp-0 =  α
  ; ramp-1 = 
  ; ramp-2 = 
  ramp-0 = θ
  ramp-1 = θ
  ramp-foreground = ${colors.foreground-alt}
#+end_src

** Launch script
#+begin_src sh :tangle ~/.config/polybar/launch.sh :mkdirp yes
  CONFIG_FILE="${HOME}/.config/polybar/config"

  # Terminate already running bar instances
  killall -q polybar

  # Wait until the processes have been shut down
  while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done

  # Launch bar1 and bar2
  polybar -c $CONFIG_FILE example

  echo "Bars launched..."
#+end_src

** Systemd 
#+begin_src conf :tangle ~/.config/systemd/user/polybar.service
  [Unit]
  Description=Polybar Panel

  [Service]
  Type=simple
  ExecStart=/usr/bin/polybar --config=/home/liolin/.config/polybar/config default
  ExecStop=/usr/bin/killall polybar
  Restart=on-failure
  RestartSec=3s

  [Install]
  WantedBy=default.target
#+end_src

The script for toggeling the polybar.
#+begin_src sh :tangle ~/.local/bin/bar-toggle
  SERVICE=polybar.service

  function start() {
      systemctl --user start $SERVICE
  }

  function stop() {
      systemctl --user stop $SERVICE
  }

  systemctl -q --user is-active $SERVICE && stop || start
#+end_src
** Required Packages                                               :packages:
#+begin_example
polybar
#+end_example

* Autostart
#+begin_src sh :tangle ~/.config/autostart.sh :tangle-mode (identity #o555)
  /usr/bin/dunst &
  /usr/bin/nm-applet &
  /usr/bin/picom --backend glx --daemon --config ~/.config/picom.conf
  #/usr/bin/setxkbmap -layout ch,us -variant ",altgr-intl" -option grp:alt_space_toggle
  /sbin/ibus-daemon -drxR
  /usr/bin/playerctld daemon
  /usr/bin/xmodmap ~/.config/xmodmap/xmodmap.conf
  /usr/bin/nitrogen --restore
  /sbin/udiskie --no-automount --tray &
  [ -x /usr/bin/redshift ] && /usr/bin/redshift -l 46.70041:9.45404 & #sils
  [ -x /usr/bin/keybase-gui ] && /usr/bin/keybase-gui &
  [ -x ~/.local/share/applications/teams.desktop ] &&  cd ~/.local/share/applications/ && gtk-launch teams.desktop 
  #/bin/sh ~/bin/update-notif
  /usr/bin/owncloud &
#+end_src

** Required Packages                                               :packages:
#+begin_example
network-manager-applet (nm-applet)
picom
xorg-setxkbmap
playerctl
xorg-xmodmap
redshift
nitrogen (feh?)
udiskie
(conky)
(keybase=)
#+end_example

* qtile
** Configuration
#+begin_src python :tangle ~/.config/qtile/config.py
  from typing import List  # noqa: F401

  from libqtile import bar, layout, widget, hook
  from libqtile.config import Click, Drag, Group, Key, KeyChord, Match, Screen
  from libqtile.lazy import lazy

  import os
  import subprocess
  import socket


  @hook.subscribe.startup_once
  def autostart():
      home = os.path.expanduser("~/.config/autostart.sh")
      subprocess.call([home])


  mod = "mod4"
  myTerm = "alacritty"
  browser = "brave"

  prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
  colors = [["#282c34", "#282c34"], # panel background
	    ["#3d3f4b", "#434758"], # background for current screen tab
	    ["#ffffff", "#ffffff"], # font color for group names
	    ["#ff5555", "#ff5555"], # border line color for current tab
	    ["#74438f", "#74438f"], # border line color for 'other tabs' and color for 'odd widgets'
	    ["#4f76c7", "#4f76c7"], # color for the 'even widgets'
	    ["#e1acff", "#e1acff"], # window name
	    ["#ecbbfb", "#ecbbfb"]] # backbround for inactive screens


  keys = [
      # Switch between windows
      Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
      Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
      Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
      Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
      Key([mod], "space", lazy.layout.next(),
	  desc="Move window focus to other window"),
      Key([mod], "t", lazy.window.toggle_floating(), desc="Put the focused window to/from floating mode"),

      # Move windows between left/right columns or move up/down in current stack.
      # Moving out of range in Columns layout will create new column.
      Key([mod, "shift"], "h", lazy.layout.shuffle_left(),
	  desc="Move window to the left"),
      Key([mod, "shift"], "l", lazy.layout.shuffle_right(),
	  desc="Move window to the right"),
      Key([mod, "shift"], "j", lazy.layout.shuffle_down(),
	  desc="Move window down"),
      Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),

      Key([mod, "control"], "h", lazy.layout.grow_left(),
	  desc="Grow window to the left"),
      Key([mod, "control"], "l", lazy.layout.grow_right(),
	  desc="Grow window to the right"),
      Key([mod, "control"], "j", lazy.layout.grow_down(),
	  desc="Grow window down"),
      Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
      Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),

      Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
      Key([mod, "shift"], "c", lazy.window.kill(), desc="Kill focused window"),

      ## Switch Focus between screens
      Key([mod], "w", lazy.to_screen(0)),
      Key([mod], "e", lazy.to_screen(1)),

      ## Engergy Keys
      Key([mod], "r", lazy.spawn("rofi -show drun"),
	  desc="Spawn a command using a prompt widget"),

      ## Shutdown Qtile
      Key([mod, "shift"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
      Key([mod, "shift"], "r", lazy.restart(), desc="Restart Qtile"),

      ## Menus
      KeyChord([mod], "p", [
	  Key([], "e",
	      lazy.spawn(f"{os.environ.get('HOME')}/.local/bin/exac")),
	  Key([], "p",
	      lazy.spawn("/usr/bin/passmenu -i"))
      ]),

      ## Multimedia Keys
      Key([], "Print", lazy.spawn("flameshot gui")),
      Key([], "XF86AudioMute", lazy.spawn("pamixer --toggle-mute")),
      Key([], "XF86AudioLowerVolume", lazy.spawn("pamixer --decrease 5")),
      Key([], "XF86AudioRaiseVolume", lazy.spawn("pamixer --increase 5")),
      Key([], "XF86AudioMicMute", lazy.spawn("amixer set Capture toggle")),
      Key([], "XF86AudioPlay", lazy.spawn("playerctl play-pause")),
      Key([], "XF86AudioPrev", lazy.spawn("playerctl previous")),
      Key([], "XF86AudioNext", lazy.spawn("playerctl next")),
      Key([], "XF86MonBrightnessUp", lazy.spawn("brightnessctl set 5%+")),
      Key([], "XF86MonBrightnessDown", lazy.spawn("brightnessctl set 5%-")),
      Key([], "XF86WLAN", lazy.spawn("nmcli radio wifi on")),

      ## Start Applications
      Key([mod], "Return", lazy.spawn(myTerm), desc="Launch terminal"),
      Key([], "F12", lazy.spawn("nemo")),

      ## Emacs
      KeyChord([mod], "d", [
	  Key([], "e",
	      lazy.spawn("emacsclient -c -a ''")),
	  Key([], "b",
	      lazy.spawn("emacsclient -c -a '' --eval '(ibuffer)'")),
	  Key([], "d",
	      lazy.spawn("emacsclient -c -a '' --eval '(dired nil)'")),
	  Key([], "m",
	      lazy.spawn("emacsclient -c -a '' --eval '(mu4e)'")),
	  Key([], "s",
	      lazy.spawn("emacsclient -c -a '' --eval '(eshell)'")),
	  Key([], "a",
	      lazy.spawn("emacsclient -c -a '' --eval '(org-agenda)'")),
      ]),

      KeyChord([mod], "s", [
	  Key([], "p",
	      lazy.spawn("evince")),
      ])
  ]

  groups = [Group("1: term"),
	    Group("2: editor"),
	    Group("3: web"),
	    Group("4: xxx"),
	    Group("5: music"),
	    Group("6: chat"),
	    Group("7: mail"),
	    Group("8: xxx"),
	    Group("9: office"),
	    Group("0: game")]

  for i in groups:
      keys.extend([
	  # mod1 + letter of group = switch to group
	  Key([mod], i.name[0], lazy.group[i.name].toscreen(),
	      desc="Switch to group {}".format(i.name)),

	  # # mod1 + shift + letter of group = move focused window to group
	  Key([mod, "shift"], i.name[0], lazy.window.togroup(i.name),
	      desc="move focused window to group {}".format(i.name)),
      ])

  layout_theme = {"border_width": 2,
		  "margin": 2,
		  "border_focus": "e1acff",
		  "border_normal": "1D2330"
		  }
  layouts = [
      layout.MonadTall(**layout_theme),
      layout.MonadWide(**layout_theme),
      layout.Max(**layout_theme),
      # Try more layouts by unleashing below layouts.
      # layout.Bsp(),
      # layout.Matrix(),
      # layout.RatioTile(),
      # layout.Tile(),
      # layout.TreeTab(),
      # layout.VerticalTile(),
      # layout.Zoomy(),
  ]

  widget_defaults = dict(
      font='sans',
      fontsize=12,
      padding=3,
  )
  extension_defaults = widget_defaults.copy()

  screens = [
      Screen(
	  bottom=bar.Bar(
	      [
		  widget.Sep(
		      linewidth = 0,
		      padding = 6,
		      foreground = colors[2],
		      background = colors[0]
		  ),
		  widget.Image(
		      filename = "~/.config/qtile/icons/python-white.png",
		      scale = "False",
		      mouse_callbacks = {'Button1': lambda: lazy.spawn(myTerm)}
		  ),
		  widget.Sep(
		      linewidth = 0,
		      padding = 6,
		      foreground = colors[2],
		      background = colors[0]
		  ),
		  widget.GroupBox(
		      font = "Ubuntu Bold",
		      fontsize = 9,
		      margin_y = 3,
		      margin_x = 0,
		      padding_y = 5,
		      padding_x = 3,
		      borderwidth = 3,
		      active = colors[2],
		      inactive = colors[7],
		      rounded = False,
		      highlight_color = colors[1],
		      highlight_method = "line",
		      this_current_screen_border = colors[6],
		      this_screen_border = colors [4],
		      other_current_screen_border = colors[6],
		      other_screen_border = colors[4],
		      foreground = colors[2],
		      background = colors[0]
		  ),
		  widget.Prompt(
		      prompt = prompt,
		      font = "Ubuntu Mono",
		      padding = 10,
		      foreground = colors[3],
		      background = colors[1]
		  ),
		  widget.Sep(
		      linewidth = 0,
		      padding = 40,
		      foreground = colors[2],
		      background = colors[0]
		  ),
		  widget.WindowName(
		      foreground = colors[6],
		      background = colors[0],
		      padding = 0
		  ),
		  widget.Systray(
		      background = colors[0],
		      padding = 5
		  ),
		  widget.Sep(
		      linewidth = 0,
		      padding = 6,
		      foreground = colors[2],
		      background = colors[0]
		  ),
		  # widget.TextBox(
		  #     text = '',
		  #     background = colors[0],
		  #     foreground = colors[4],
		  #     padding = 0,
		  #     fontsize = 37
		  # ),
		  # widget.KeyboardLayout(
		  #     configured_keyboards = ['CH', 'US'],
		  #     foreground = colors[2],
		  #     background = colors[4],
		  #     padding = 5,
		  #     update_interval = 1,
		  # ),
		  widget.TextBox(
		      text = '',
		      background = colors[0],
		      foreground = colors[5],
		      padding = 0,
		      fontsize = 37
		  ),
		  widget.Net(
		      interface = "wlan0",
		      format = '{down} ↓↑ {up}',
		      foreground = colors[2],
		      background = colors[5],
		      padding = 5
		  ),
		  widget.TextBox(
		      text = '',
		      background = colors[5],
		      foreground = colors[4],
		      padding = 0,
		      fontsize = 37
		  ),
		  widget.TextBox(
		      text = " 🌡",
		      padding = 2,
		      foreground = colors[2],
		      background = colors[4],
		      fontsize = 11
		  ),
		  widget.ThermalSensor(
		      foreground = colors[2],
		      background = colors[4],
		      threshold = 90,
		      padding = 5
		  ),
		  widget.TextBox(
		      text = '',
		      background = colors[4],
		      foreground = colors[5],
		      padding = 0,
		      fontsize = 37
		  ),
		  widget.CPU(
		      foreground = colors[2],
		      background = colors[5],
		      padding = 5,
		      format = 'CPU {load_percent}%'
		  ),
		  widget.TextBox(
		      text = '',
		      background = colors[5],
		      foreground = colors[4],
		      padding = 0,
		      fontsize = 37
		  ),
		  widget.TextBox(
		      text = " 🖬",
		      foreground = colors[2],
		      background = colors[4],
		      padding = 0,
		      fontsize = 14
		  ),
		  widget.Memory(
		      foreground = colors[2],
		      background = colors[4],
		      measure_mem = 'G',
		      mouse_callbacks = {'Button1': lambda: lazy.spawn(myTerm + ' -e htop')},
		      padding = 5
		  ),
		  widget.TextBox(
		      text = '',
		      background = colors[4],
		      foreground = colors[5],
		      padding = 0,
		      fontsize = 37
		  ),
		  widget.TextBox(
		      text = " Vol:",
		      foreground = colors[2],
		      background = colors[5],
		      padding = 0
		  ),
		  widget.PulseVolume(
		      update_interval = 0.1,
		      foreground = colors[2],
		      background = colors[5],
		      padding = 5
		  ),
		  widget.TextBox(
		      text = '',
		      background = colors[5],
		      foreground = colors[4],
		      padding = 0,
		      fontsize = 37
		  ),
		  widget.CurrentLayoutIcon(
		      custom_icon_paths = [os.path.expanduser("~/.config/qtile/icons")],
		      foreground = colors[0],
		      background = colors[4],
		      padding = 0,
		      scale = 0.7
		  ),
		  widget.CurrentLayout(
		      foreground = colors[2],
		      background = colors[4],
		      padding = 5
		  ),
		  widget.TextBox(
		      text = '',
		      background = colors[4],
		      foreground = colors[5],
		      padding = 0,
		      fontsize = 37
		  ),
		  widget.Clock(
		      foreground = colors[2],
		      background = colors[5],
		      format = "%A, %B %d - %H:%M "
		  ),
		  widget.TextBox(
		      text = '',
		      background = colors[5],
		      foreground = colors[4],
		      padding = 0,
		      fontsize = 37
		  ),
		  widget.BatteryIcon(
		      background = colors[4]
		  ),
		  widget.Battery(
		      background = colors[4],
		      notify_below = 10,
		      format = "{char} {percent:2.0%} {hour:d}:{min:02d}"
		  ),
		  widget.Sep(
		      linewidth = 0,
		      padding = 6,
		      foreground = colors[2],
		      background = colors[0]
		  ),
	      ],
	      24,
	  ),
      ),
  ]

  # Drag floating layouts.
  mouse = [
      Drag([mod], "Button1", lazy.window.set_position_floating(),
	   start=lazy.window.get_position()),
      Drag([mod], "Button3", lazy.window.set_size_floating(),
	   start=lazy.window.get_size()),
      Click([mod], "Button2", lazy.window.bring_to_front())
  ]

  dgroups_key_binder = None
  dgroups_app_rules = []  # type: List
  follow_mouse_focus = True
  bring_front_click = False
  cursor_warp = False
  floating_layout = layout.Floating(float_rules=[
      Match(wm_type='utility'),
      Match(wm_type='notification'),
      Match(wm_type='toolbar'),
      Match(wm_type='splash'),
      Match(wm_type='dialog'),
      Match(wm_class='file_progress'),
      Match(wm_class='confirm'),
      Match(wm_class='dialog'),
      Match(wm_class='download'),
      Match(wm_class='error'),
      Match(wm_class='notification'),
      Match(wm_class='splash'),
      Match(wm_class='toolbar'),
      Match(wm_class='confirmreset'),  # gitk
      Match(wm_class='makebranch'),  # gitk
      Match(wm_class='maketag'),  # gitk
      Match(wm_class='ssh-askpass'),  # ssh-askpass
      Match(wm_class='pinentry-gtk-2'),  # GPG key password entry
      Match(title='branchdialog'),  # gitk
  ])
  auto_fullscreen = True
  focus_on_window_activation = "smart"
  reconfigure_screens = True

  # If things like steam games want to auto-minimize themselves when losing
  # focus, should we respect this or not?
  auto_minimize = True

  # XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
  # string besides java UI toolkits; you can see several discussions on the
  # mailing lists, GitHub issues, and other WM documentation that suggest setting
  # this string if your java app doesn't work correctly. We may as well just lie
  # and say that we're a working one by default.
  #
  # We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
  # java that happens to be on java's whitelist.
  wmname = "LG3D"

#+end_src
** Resources
Installation python icon qtile
#+begin_src bash :tangle no :dir ~/.dotfiles
  mkdir -p ~/.config/qtile/icons/
  cp resources/qtile/python-white.png ~/.config/qtile/icons/
#+end_src

** Required Packages                                               :packages:
#+begin_example
qtile
python-psutil
python-pytest-mypy
brightnessctl 
#+end_example
* qutebrowser
This configuration is currently not used.
#+begin_src python :tangle no
  # Autogenerated config.py
  #
  # NOTE: config.py is intended for advanced users who are comfortable
  # with manually migrating the config file on qutebrowser upgrades. If
  # you prefer, you can also configure qutebrowser using the
  # :set/:bind/:config-* commands without having to write a config.py
  # file.
  #
  # Documentation:
  #   qute://help/configuring.html
  #   qute://help/settings.html

  # Change the argument to True to still load settings configured via autoconfig.yml
  config.load_autoconfig(False)

  # Which cookies to accept. With QtWebEngine, this setting also controls
  # other features with tracking capabilities similar to those of cookies;
  # including IndexedDB, DOM storage, filesystem API, service workers, and
  # AppCache. Note that with QtWebKit, only `all` and `never` are
  # supported as per-domain values. Setting `no-3rdparty` or `no-
  # unknown-3rdparty` per-domain on QtWebKit will have the same effect as
  # `all`. If this setting is used with URL patterns, the pattern gets
  # applied to the origin/first party URL of the page making the request,
  # not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
  # from URLs, so URL patterns using paths will not match. With
  # QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
  # you will typically need to set this setting for `example.com` when the
  # cookie is set on `somesubdomain.example.com` for it to work properly.
  # To debug issues with this setting, start qutebrowser with `--debug
  # --logfilter network --debug-flag log-cookies` which will show all
  # cookies being set.
  # Type: String
  # Valid values:
  #   - all: Accept all cookies.
  #   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
  #   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
  #   - never: Don't accept cookies at all.
  config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

  # Which cookies to accept. With QtWebEngine, this setting also controls
  # other features with tracking capabilities similar to those of cookies;
  # including IndexedDB, DOM storage, filesystem API, service workers, and
  # AppCache. Note that with QtWebKit, only `all` and `never` are
  # supported as per-domain values. Setting `no-3rdparty` or `no-
  # unknown-3rdparty` per-domain on QtWebKit will have the same effect as
  # `all`. If this setting is used with URL patterns, the pattern gets
  # applied to the origin/first party URL of the page making the request,
  # not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
  # from URLs, so URL patterns using paths will not match. With
  # QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
  # you will typically need to set this setting for `example.com` when the
  # cookie is set on `somesubdomain.example.com` for it to work properly.
  # To debug issues with this setting, start qutebrowser with `--debug
  # --logfilter network --debug-flag log-cookies` which will show all
  # cookies being set.
  # Type: String
  # Valid values:
  #   - all: Accept all cookies.
  #   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
  #   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
  #   - never: Don't accept cookies at all.
  config.set('content.cookies.accept', 'all', 'devtools://*')

  # Value to send in the `Accept-Language` header. Note that the value
  # read from JavaScript is always the global value.
  # Type: String
  config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

  # User agent to send.  The following placeholders are defined:  *
  # `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
  # The underlying WebKit version (set to a fixed value   with
  # QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
  # QtWebEngine. * `{qt_version}`: The underlying Qt version. *
  # `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
  # QtWebEngine. * `{upstream_browser_version}`: The corresponding
  # Safari/Chrome version. * `{qutebrowser_version}`: The currently
  # running qutebrowser version.  The default value is equal to the
  # unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
  # read from JavaScript is always the global value. With QtWebEngine
  # between 5.12 and 5.14 (inclusive), changing the value exposed to
  # JavaScript requires a restart.
  # Type: FormatString
  config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

  # User agent to send.  The following placeholders are defined:  *
  # `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
  # The underlying WebKit version (set to a fixed value   with
  # QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
  # QtWebEngine. * `{qt_version}`: The underlying Qt version. *
  # `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
  # QtWebEngine. * `{upstream_browser_version}`: The corresponding
  # Safari/Chrome version. * `{qutebrowser_version}`: The currently
  # running qutebrowser version.  The default value is equal to the
  # unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
  # read from JavaScript is always the global value. With QtWebEngine
  # between 5.12 and 5.14 (inclusive), changing the value exposed to
  # JavaScript requires a restart.
  # Type: FormatString
  config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

  # User agent to send.  The following placeholders are defined:  *
  # `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
  # The underlying WebKit version (set to a fixed value   with
  # QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
  # QtWebEngine. * `{qt_version}`: The underlying Qt version. *
  # `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
  # QtWebEngine. * `{upstream_browser_version}`: The corresponding
  # Safari/Chrome version. * `{qutebrowser_version}`: The currently
  # running qutebrowser version.  The default value is equal to the
  # unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
  # read from JavaScript is always the global value. With QtWebEngine
  # between 5.12 and 5.14 (inclusive), changing the value exposed to
  # JavaScript requires a restart.
  # Type: FormatString
  config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

  # Load images automatically in web pages.
  # Type: Bool
  config.set('content.images', True, 'chrome-devtools://*')

  # Load images automatically in web pages.
  # Type: Bool
  config.set('content.images', True, 'devtools://*')

  # Enable JavaScript.
  # Type: Bool
  config.set('content.javascript.enabled', True, 'chrome-devtools://*')

  # Enable JavaScript.
  # Type: Bool
  config.set('content.javascript.enabled', True, 'devtools://*')

  # Enable JavaScript.
  # Type: Bool
  config.set('content.javascript.enabled', True, 'chrome://*/*')

  # Enable JavaScript.
  # Type: Bool
  config.set('content.javascript.enabled', True, 'qute://*/*')
  config.set('auto_save.session', True)

  # List of user stylesheet filenames to use.
  # Type: List of File, or File
  c.content.user_stylesheets = []

  # Text color of the completion widget. May be a single color to use for
  # all columns or a list of three colors, one for each column.
  # Type: List of QtColor, or QtColor
  c.colors.completion.fg = '#d8dee9'

  # Background color of the completion widget for odd rows.
  # Type: QssColor
  c.colors.completion.odd.bg = '#3b4252'

  # Background color of the completion widget for even rows.
  # Type: QssColor
  c.colors.completion.even.bg = '#3b4252'

  # Foreground color of completion widget category headers.
  # Type: QtColor
  c.colors.completion.category.fg = '#e5e9f0'

  # Background color of the completion widget category headers.
  # Type: QssColor
  c.colors.completion.category.bg = '#2e3440'

  # Top border color of the completion widget category headers.
  # Type: QssColor
  c.colors.completion.category.border.top = '#2e3440'

  # Bottom border color of the completion widget category headers.
  # Type: QssColor
  c.colors.completion.category.border.bottom = '#2e3440'

  # Foreground color of the selected completion item.
  # Type: QtColor
  c.colors.completion.item.selected.fg = '#eceff4'

  # Background color of the selected completion item.
  # Type: QssColor
  c.colors.completion.item.selected.bg = '#4c566a'

  # Top border color of the selected completion item.
  # Type: QssColor
  c.colors.completion.item.selected.border.top = '#4c566a'

  # Bottom border color of the selected completion item.
  # Type: QssColor
  c.colors.completion.item.selected.border.bottom = '#4c566a'

  # Foreground color of the matched text in the completion.
  # Type: QtColor
  c.colors.completion.match.fg = '#ebcb8b'

  # Color of the scrollbar handle in the completion view.
  # Type: QssColor
  c.colors.completion.scrollbar.fg = '#e5e9f0'

  # Color of the scrollbar in the completion view.
  # Type: QssColor
  c.colors.completion.scrollbar.bg = '#3b4252'

  # Background color for the download bar.
  # Type: QssColor
  c.colors.downloads.bar.bg = '#2e3440'

  # Color gradient stop for download backgrounds.
  # Type: QtColor
  c.colors.downloads.stop.bg = '#b48ead'

  # Color gradient interpolation system for download backgrounds.
  # Type: ColorSystem
  # Valid values:
  #   - rgb: Interpolate in the RGB color system.
  #   - hsv: Interpolate in the HSV color system.
  #   - hsl: Interpolate in the HSL color system.
  #   - none: Don't show a gradient.
  c.colors.downloads.system.bg = 'none'

  # Foreground color for downloads with errors.
  # Type: QtColor
  c.colors.downloads.error.fg = '#e5e9f0'

  # Background color for downloads with errors.
  # Type: QtColor
  c.colors.downloads.error.bg = '#bf616a'

  # Font color for hints.
  # Type: QssColor
  c.colors.hints.fg = '#2e3440'

  # Background color for hints. Note that you can use a `rgba(...)` value
  # for transparency.
  # Type: QssColor
  c.colors.hints.bg = '#ebcb8b'

  # Font color for the matched part of hints.
  # Type: QtColor
  c.colors.hints.match.fg = '#5e81ac'

  # Text color for the keyhint widget.
  # Type: QssColor
  c.colors.keyhint.fg = '#e5e9f0'

  # Highlight color for keys to complete the current keychain.
  # Type: QssColor
  c.colors.keyhint.suffix.fg = '#ebcb8b'

  # Background color of the keyhint widget.
  # Type: QssColor
  c.colors.keyhint.bg = '#3b4252'

  # Foreground color of an error message.
  # Type: QssColor
  c.colors.messages.error.fg = '#e5e9f0'

  # Background color of an error message.
  # Type: QssColor
  c.colors.messages.error.bg = '#bf616a'

  # Border color of an error message.
  # Type: QssColor
  c.colors.messages.error.border = '#bf616a'

  # Foreground color of a warning message.
  # Type: QssColor
  c.colors.messages.warning.fg = '#e5e9f0'

  # Background color of a warning message.
  # Type: QssColor
  c.colors.messages.warning.bg = '#d08770'

  # Border color of a warning message.
  # Type: QssColor
  c.colors.messages.warning.border = '#d08770'

  # Foreground color of an info message.
  # Type: QssColor
  c.colors.messages.info.fg = '#e5e9f0'

  # Background color of an info message.
  # Type: QssColor
  c.colors.messages.info.bg = '#88c0d0'

  # Border color of an info message.
  # Type: QssColor
  c.colors.messages.info.border = '#88c0d0'

  # Foreground color for prompts.
  # Type: QssColor
  c.colors.prompts.fg = '#e5e9f0'

  # Border used around UI elements in prompts.
  # Type: String
  c.colors.prompts.border = '1px solid #2e3440'

  # Background color for prompts.
  # Type: QssColor
  c.colors.prompts.bg = '#434c5e'

  # Background color for the selected item in filename prompts.
  # Type: QssColor
  c.colors.prompts.selected.bg = '#4c566a'

  # Foreground color of the statusbar.
  # Type: QssColor
  c.colors.statusbar.normal.fg = '#e5e9f0'

  # Background color of the statusbar.
  # Type: QssColor
  c.colors.statusbar.normal.bg = '#2e3440'

  # Foreground color of the statusbar in insert mode.
  # Type: QssColor
  c.colors.statusbar.insert.fg = '#3b4252'

  # Background color of the statusbar in insert mode.
  # Type: QssColor
  c.colors.statusbar.insert.bg = '#a3be8c'

  # Foreground color of the statusbar in passthrough mode.
  # Type: QssColor
  c.colors.statusbar.passthrough.fg = '#e5e9f0'

  # Background color of the statusbar in passthrough mode.
  # Type: QssColor
  c.colors.statusbar.passthrough.bg = '#5e81ac'

  # Foreground color of the statusbar in private browsing mode.
  # Type: QssColor
  c.colors.statusbar.private.fg = '#e5e9f0'

  # Background color of the statusbar in private browsing mode.
  # Type: QssColor
  c.colors.statusbar.private.bg = '#4c566a'

  # Foreground color of the statusbar in command mode.
  # Type: QssColor
  c.colors.statusbar.command.fg = '#e5e9f0'

  # Background color of the statusbar in command mode.
  # Type: QssColor
  c.colors.statusbar.command.bg = '#434c5e'

  # Foreground color of the statusbar in private browsing + command mode.
  # Type: QssColor
  c.colors.statusbar.command.private.fg = '#e5e9f0'

  # Background color of the statusbar in private browsing + command mode.
  # Type: QssColor
  c.colors.statusbar.command.private.bg = '#434c5e'

  # Foreground color of the statusbar in caret mode.
  # Type: QssColor
  c.colors.statusbar.caret.fg = '#e5e9f0'

  # Background color of the statusbar in caret mode.
  # Type: QssColor
  c.colors.statusbar.caret.bg = '#b48ead'

  # Foreground color of the statusbar in caret mode with a selection.
  # Type: QssColor
  c.colors.statusbar.caret.selection.fg = '#e5e9f0'

  # Background color of the statusbar in caret mode with a selection.
  # Type: QssColor
  c.colors.statusbar.caret.selection.bg = '#b48ead'

  # Background color of the progress bar.
  # Type: QssColor
  c.colors.statusbar.progress.bg = '#e5e9f0'

  # Default foreground color of the URL in the statusbar.
  # Type: QssColor
  c.colors.statusbar.url.fg = '#e5e9f0'

  # Foreground color of the URL in the statusbar on error.
  # Type: QssColor
  c.colors.statusbar.url.error.fg = '#bf616a'

  # Foreground color of the URL in the statusbar for hovered links.
  # Type: QssColor
  c.colors.statusbar.url.hover.fg = '#88c0d0'

  # Foreground color of the URL in the statusbar on successful load
  # (http).
  # Type: QssColor
  c.colors.statusbar.url.success.http.fg = '#e5e9f0'

  # Foreground color of the URL in the statusbar on successful load
  # (https).
  # Type: QssColor
  c.colors.statusbar.url.success.https.fg = '#a3be8c'

  # Foreground color of the URL in the statusbar when there's a warning.
  # Type: QssColor
  c.colors.statusbar.url.warn.fg = '#d08770'

  # Background color of the tab bar.
  # Type: QssColor
  c.colors.tabs.bar.bg = '#4c566a'

  # Color for the tab indicator on errors.
  # Type: QtColor
  c.colors.tabs.indicator.error = '#bf616a'

  # Color gradient interpolation system for the tab indicator.
  # Type: ColorSystem
  # Valid values:
  #   - rgb: Interpolate in the RGB color system.
  #   - hsv: Interpolate in the HSV color system.
  #   - hsl: Interpolate in the HSL color system.
  #   - none: Don't show a gradient.
  c.colors.tabs.indicator.system = 'none'

  # Foreground color of unselected odd tabs.
  # Type: QtColor
  c.colors.tabs.odd.fg = '#e5e9f0'

  # Background color of unselected odd tabs.
  # Type: QtColor
  c.colors.tabs.odd.bg = '#4c566a'

  # Foreground color of unselected even tabs.
  # Type: QtColor
  c.colors.tabs.even.fg = '#e5e9f0'

  # Background color of unselected even tabs.
  # Type: QtColor
  c.colors.tabs.even.bg = '#4c566a'

  # Foreground color of selected odd tabs.
  # Type: QtColor
  c.colors.tabs.selected.odd.fg = '#e5e9f0'

  # Background color of selected odd tabs.
  # Type: QtColor
  c.colors.tabs.selected.odd.bg = '#2e3440'

  # Foreground color of selected even tabs.
  # Type: QtColor
  c.colors.tabs.selected.even.fg = '#e5e9f0'

  # Background color of selected even tabs.
  # Type: QtColor
  c.colors.tabs.selected.even.bg = '#2e3440'

  # Bindings for normal mode
  config.bind(',M', 'hint links spawn mpv {hint-url}')
  config.bind(',m', 'spawn mpv {url}')
  config.bind('<Ctrl+r>', 'config-cycle content.user_stylesheets "/home/liolin/.config/qutebrowser/css/solarized-dark/solarized-dark-all-sites.css" "/home/liolin/.config/qutebrowser/css/solarized-dark/solarized-dark-duckduckgo.com.css" "/home/liolin/.config/qutebrowser/css/solarized-dark/solarized-dark-reddit.com.css"  ""')
#+end_src
* rofi
** Configuration
#+begin_src conf :tangle ~/.config/rofi/config.rasi
  @theme "/usr/share/rofi/themes/Arc-Dark.rasi"
#+end_src
** TODO exac
#+begin_src python
  required=['dm-tool', 'rofi', 'dunstify']
#+end_src
trap does not work. Why?
#+begin_src sh :tangle ~/.local/bin/exac :tangle-mode (identity #o555)
  set -Eeuo pipefail

  function onError {
      MESSAGE=$1
      dunstify --appname="Exit Actions" --urgency=critical --timeout=7000 exac "${MESSAGE}"
  }


  function availabel {
      echo $1
      which $1 > /dev/null 2>&1
  }

  required=(dm-tool xscreenlock rofi dunstify)

  options="lock\nswitch_user\nsuspend\nhibernate\nreboot\npoweroff"
  action=$(
      echo -e $options | \
	  rofi -dmenu -p "Which action?")

  case "$action" in
      lock)
	  xsecurelock
	  ;;
      switch_user)
	  dm-tool switch-to-greeter
	  ;;
      suspend)
	  xsecurelock -- systemctl suspend
	  ;;
      hibernate)
	  xsecurelock -- systemctl hibernate
	  ;;
      reboot)
	  systemctl reboot
	  ;;
      poweroff)
	  systemctl poweroff
	  ;;
      ,*)
	  onError "== ! wrong argument ! ==
  Try again with: lock | switch_user | suspend | hibernate | reboot | shutdown"
	  exit 2
  esac

  exit 0
#+end_src
** Required Packages                                               :packages:
#+begin_example
rofi
lightdm
xsecurelock 
#+end_example

* scripts
** audioctl
#+begin_src sh :tangle ~/.local/bin/audioctl :tangle-mode (identity #o555)
  getDefaultSinkName() {
      pacmd stat | awk -F": " '/^Default sink name: /{print $2}'
  }

  getDefaultSinkVol() {
      pacmd list-sinks |
	  awk '/^\s+name: /{indefault = $2 == "<'$(getdefaultsinkname)'>"}
	      /^\s+volume: / && indefault {print $5; exit}'
  }

  toggleMuteDefaultSink() {
      pactl set-sink-mute $(getDefaultSinkName) toggle
  }

  raiseDefaultSinkVol() {
      pactl set-sink-volume $(getDefaultSinkName) +5%
  }

  lowerDefaultSinkVol() {
      pactl set-sink-volume $(getDefaultSinkName) -5%
  }

  for i in "$@"; do
      case $i in
	  -m|--mute=*)
	      toggleMuteDefaultSink
	      shift # past argument=value
	      ;;
	  -r|--raise)
	      raiseDefaultSinkVol
	      shift # past argument=value
	      ;;
	  -l|--lower)
	      lowerDefaultSinkVol
	      shift # past argument=value
	      ;;
	  ,*)
	      # unknown option
	      ;;
      esac
  done
#+end_src
** fm6000
The Installation for fm6000 (no tangle)
#+begin_src sh :tangle no
  curl https://raw.githubusercontent.com/anhsirk0/fetch-master-6000/master/fm6000.pl --output ~/.local/bin/fm6000
  chmod 544 ~/.local/bin/fm6000
#+end_src
** selim
#+begin_src sh :tangle ~/.local/bin/selim :tangle-mode (identity #o555)
  dir="$1"
  /usr/bin/sxiv -o -q -r * | /usr/bin/tr '\n' '\0' | /usr/bin/xargs -I{} -0 cp {} "$dir"
#+end_src
** screenshot
- flameshot
** hl
#+begin_src sh :tangle ~/.local/bin/hl :tangle-mode (identity #o555)
  gpg --decrypt $HOME/finance/2022.journal.gpg 2> /dev/null | hledger -f- "$@"
#+end_src
** wolsprite
WoL for SPRITE
#+begin_src sh :tangle ~/.local/bin/wolsprite :tangle-mode (identity #o555)
wol a8:5e:45:56:5c:66
#+end_src
** Required Packages                                               :packages:
#+begin_example
sxiv
flameshot
hledger
#+end_example

* starship
#+begin_src toml :tangle ~/.config/starship.toml
  [hostname]
  ssh_only = false
  format = "on [$hostname](bold blue) "
  disabled = false

  [shell]
  unknown_indicator = "mystery shell"
  style = "cyan bold"
  disabled = false
#+end_src

** Required Packages                                               :packages:
#+begin_example
starship
#+end_example

* tmux
I do not use tmux at the moment (=~/.tmux.conf=)
#+begin_src conf :tangle no
  # split panes using | and -
  bind | split-window -h
  bind - split-window -v
  unbind '"'
  unbind %

  # activate mouse wheel
  setw -g mouse on

  # reload config file
  bind r source-file ~/.tmux.conf

  # terminal color
  set -g default-terminal "screen-256color"

#+end_src

** Required Packages                                               :packages:
#+begin_example
(tmux)
#+end_example
* vim
#+begin_src sh :tangle ~/.vimrc
  "  Default ~/.vimrc for vagrant user on Arch Linux.

  " Vundle
  " {{{
  set nocompatible              " be iMproved, required
  filetype off                  " required
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()

  " Let Vundle manage itself.
  Plugin 'gmarik/Vundle.vim'
  Plugin 'vim-airline/vim-airline'
  " Color schemes
  Plugin 'tomasr/molokai'
  Plugin 'chriskempson/base16-vim'
  Plugin 'dracula/vim', { 'name': 'dracula' }

  " All of your Plugins must be added before the following line
  call vundle#end()            " required
  filetype plugin indent on    " required
  " }}}

  " Airline
  " {{{
  let g:airline_powerline_fonts = 1
  set laststatus=2
  " }}}

       " Colors
  " {{{
	 set t_Co=256
	 colorscheme dracula
	 syntax enable                   "syntax highlighting
  " }}}

       " UI
  " {{{
	 set ruler                       "show the cursor position all the time
  set showcmd                     "display incomplete commands
	 set nu                          "show line numbers
  set cmdheight=1                 "The commandbar height
	 set splitbelow                  " Horizontal splits open below current file
  set splitright                  " Vertical splits open to the right of the current file
	 set wildmode=longest,list       " Pressing <Tab> shows command suggestions similar to pressing <Tab> in bash 
  " }}}

       " Moving
  " {{{
	 set backspace=indent,eol,start  "allow backspacing over everything in insert mode
  " }}}

       " Search
  " {{{
	 set incsearch                   "do incremental searching
  set hlsearch                    "highlight search terms
	 set ic                          "Ignore Case during searches
  set showmatch                   "Show matching bracets when text indicator is over them
	 " }}}

  " Whitespaces
	 " {{{
  set expandtab                   "use spaces instead of tabs
	 set tabstop=4                   "insert 4 spaces whenever the tab key is pressed
  set shiftwidth=4                "set indentation to 4 spaces
	 set autoindent                  "start new line at the same indentation level
  " }}}


       " Misc
  " {{{
	 set history=50                  "keep 50 lines of command line history
  set nobackup                    " do not keep backup files, it's 70's style cluttering
	 set noswapfile                  " do not write annoying intermediate swap files,
  set ttimeoutlen=50              "Solves: there is a pause when leaving insert mode
  " }}}
#+end_src
** Required Packages                                               :packages:
#+begin_example
vim
#+end_example

* owncloud for OST
** Required Packages                                               :packages:
#+begin_example
owncloud-client
gnome-keyring
#+end_example

* keybase
** Required Packages                                               :packages:
#+begin_example
keybase-gui
#+end_example

* pass
** Required Packages                                               :packages:
#+begin_example
pass
dmenu
browserpass
browserpass-firefox
xclip
#+end_example

* Latex
** Required Packages                                               :packages:
#+begin_example
texlive-most
#+end_example

* xmodmap
#+begin_src conf :tangle ~/.config/xmodmap/xmodmap.conf
  remove Lock = Caps_Lock
  keysym Caps_Lock = Control_L
  add Control = Control_L
#+end_src

* xmonad

This configuration is currently not used (no tangle).

#+begin_src haskell :tangle no
--
-- xmonad example config file.
--

import XMonad
import XMonad.Util.Run
import XMonad.Util.SpawnOnce
import XMonad.Util.EZConfig
import XMonad.Layout.Spacing
import XMonad.Actions.SpawnOn
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.SetWMName
import XMonad.Actions.WithAll (sinkAll, killAll)
import Data.Monoid
import System.Exit

import qualified XMonad.StackSet as W
import qualified Data.Map        as M

import qualified DBus as D
import qualified DBus.Client as D
import qualified Codec.Binary.UTF8.String as UTF8

-- The preferred terminal program, which is used in a binding below and by
-- certain contrib modules.
--
myTerminal :: [Char]
myTerminal = "alacritty"

myBrowser :: [Char]
myBrowser = "brave"

myEditor :: [Char]
myEditor = "emacsclient"

-- Whether focus follows the mouse pointer.
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True

-- Whether clicking on a window to focus also passes the click to the window
myClickJustFocuses :: Bool
myClickJustFocuses = False

-- Width of the window border in pixels.
--
myBorderWidth :: Dimension
myBorderWidth = 2

-- modMask lets you specify which modkey you want to use. The default
-- is mod1Mask ("left alt").  You may also consider using mod3Mask
-- ("right alt"), which does not conflict with emacs keybindings. The
-- "windows key" is usually mod4Mask.
--
myModMask :: KeyMask
myModMask = mod4Mask

-- The default number of workspaces (virtual screens) and their names.
-- By default we use numeric strings, but any string may be used as a
-- workspace name. The number of workspaces is determined by the length
-- of this list.
--
myWorkspaces :: [[Char]]
myWorkspaces    = ["1: term", "2: editor", "3: web", "4: xxx", "5: music", "6: chat", "7: mail", "8: xxx", "9: office", "10: game"]

-- Border colors for unfocused and focused windows, respectively.
--
myNormalBorderColor :: [Char]
myFocusedBorderColor :: [Char]
myNormalBorderColor  = "#282a36"
myFocusedBorderColor = "#50fa7b"

------------------------------------------------------------------------
-- Key bindings. Add, modify or remove key bindings here.
--
myKeys :: [(String, X ())]
myKeys =
	[
    -- Xmonad
	  ("M-C-r", spawn "xmonad --recompile && xmonad --restart")      -- Recompiles xmonad
	, ("M-S-r", spawn "xmonad --restart")                            -- Restarts xmonad
	, ("M-S-q", io exitSuccess)                                      -- Quits xmonad
	, ("M-<Return>", spawn (myTerminal))

    -- Window
	, ("M-S-c", kill)
	, ("M-S-a", killAll)                         -- Kill all windows on current workspace

    -- Layout
	, ("M-<Space>", sendMessage NextLayout)     -- Switch to next layout
	, ("M-n", refresh)                          -- Resize viewed windows to the correct size
	, ("M-<Tab>", windows W.focusDown)          -- Move focus to the next window
	, ("M-j", windows W.focusDown)              -- Move focus to the next window
	, ("M-k", windows W.focusUp  )              -- Move focus to the previous window
	, ("M-m", windows W.focusMaster  )          -- Move focus to the master window
	, ("M-S-<Return>", windows W.swapMaster)    -- Swap the focused window and the master window
	, ("M-S-j", windows W.swapDown  )           -- Swap the focused window with the next window
	, ("M-S-k", windows W.swapUp    )           -- Swap the focused window with the previous window
	, ("M-h", sendMessage Shrink)               -- Shrink the master area
	, ("M-l", sendMessage Expand)               -- Expand the master area
	, ("M-t", withFocused $ windows . W.sink)   -- Push window back into tiling
	, ("M-,", sendMessage (IncMasterN 1))       -- Increment the number of windows in the master area
	, ("M-.", sendMessage (IncMasterN (-1)))    -- Deincrement the number of windows in the master area

    -- Menus
	, ("M-p s", spawn "rofi -show drun")
	, ("M-p e", spawn "/usr/bin/env bash ~/.xmonad/rofi_power") -- Run power menu
	, ("M-p p", spawn "/usr/bin/passmenu -i")
    -- Emacs
	, ("M-d e", spawn "emacsclient -c -a ''")                           -- start emacs
	, ("M-d b", spawn "emacsclient -c -a '' --eval '(ibuffer)'")        -- list emacs buffers
	, ("M-d d", spawn "emacsclient -c -a '' --eval '(dired nil)'")      -- dired emacs file manager
	, ("M-d m", spawn "emacsclient -c -a '' --eval '(mu4e)'")           -- mu4e emacs email client
	, ("M-d s", spawn "emacsclient -c -a '' --eval '(eshell)'")         -- eshell within emacs
	, ("M-d a", spawn "emacsclient -c -a '' --eval '(org-agenda)'")     -- open org agenda
	, ("M-d c", spawn "emacsclient -c -a '' --eval '(org-capture)'")    -- open org-capture

    -- Applications
	, ("<F12>", spawn "pcmanfm")                          -- Run filemanager
	, ("M-S-b", spawn "bash /home/liolin/bin/bar-toggle") -- Toggle the status bar (polybar)

    -- Multimedia Keys
	, ("<XF86AudioMute>", spawn "pamixer --toggle-mute")        -- Toggle mute
	, ("<XF86AudioLowerVolume>", spawn "pamixer --decrease 5")  -- Lower Volume
	, ("<XF86AudioRaiseVolume>", spawn "pamixer --increase 5")  -- Raise Volume
	, ("<XF86AudioMicMute>", spawn "amixer set Capture toggle") -- Toggle microphone
	, ("<XF86AudioPlay>", spawn "playerctl play-pause")         -- Toggle pause
	, ("<XF86AudioPrev>", spawn "playerctl previous")           -- Skip backwards in playlist
	, ("<XF86AudioNext>", spawn "playerctl next")               -- Skip forwards in playlist

	, ("<XF86MonBrightnessUp>", spawn "brightnessctl 5%+")
	, ("<XF86MonBrightnessDown>", spawn "brightnessctl 5%-")

	, ("<XF86WLAN>", spawn "nmcli radio wifi on")

	, ("<Print>", spawn "sleep 0.2; /home/liolin/bin/screenshot")
	]

------------------------------------------------------------------------
-- Mouse bindings: default actions bound to mouse events
--
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
				       >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
				       >> windows W.shiftMaster))

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]

------------------------------------------------------------------------
-- Layouts:

-- You can specify and transform your layouts by modifying these values.
-- If you change layout bindings be sure to use 'mod-shift-space' after
-- restarting (with 'mod-q') to reset your layout state to the new
-- defaults, as xmonad preserves your old layout settings by default.
--
-- The available layouts.  Note that each layout is separated by |||,
-- which denotes layout choice.
--
myLayout = avoidStruts (tiled ||| Mirror tiled ||| Full)
  where
     -- default tiling algorithm partitions the screen into two panes
     tiled   = spacingRaw True (Border 5 5 5 5) True (Border 5 5 5 5) True $ Tall nmaster delta ratio

     -- The default number of windows in the master pane
     nmaster = 1

     -- Default proportion of screen occupied by master pane
     ratio   = 1/2

     -- Percent of screen to increment by when resizing panes
     delta   = 3/100

------------------------------------------------------------------------
-- Window rules:

-- Execute arbitrary actions and WindowSet manipulations when managing
-- a new window. You can use this to, for example, always float a
-- particular program, or have a client always appear on a particular
-- workspace.
--
-- To find the property name associated with a program, use
-- > xprop | grep WM_CLASS
-- and click on the client you're interested in.
--
-- To match on the WM_NAME, you can use 'title' in the same way that
-- 'className' and 'resource' are used below.
--
myManageHook :: Query (Endo WindowSet)
myManageHook = composeAll
    [ className =? "MPlayer"        --> doFloat
    , className =? "Gimp"           --> doFloat
    , className =? "Pavucontrol"    --> doFloat
    , className =? "Keybase"        --> doShift "6: chat"
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore ]

------------------------------------------------------------------------
-- Event handling

-- * EwmhDesktops users should change this to ewmhDesktopsEventHook
--
-- Defines a custom handler function for X Events. The function should
-- return (All True) if the default handler is to be run afterwards. To
-- combine event hooks use mappend or mconcat from Data.Monoid.
--
myEventHook :: Event -> X All
myEventHook = mempty

------------------------------------------------------------------------
-- Status bars and logging

-- Perform an arbitrary action on each internal state change or X event.
-- See the 'XMonad.Hooks.DynamicLog' extension for examples.
--
bg1       = "#3c3836"
bg2       = "#504945"
red       = "#fb4934"
myLogHook :: D.Client -> PP
myLogHook dbus = def
    { ppOutput = dbusOutput dbus
    , ppCurrent = wrap ("%{B" ++ bg2 ++ "} ") " %{B-}"
    , ppVisible = wrap ("%{B" ++ bg1 ++ "} ") " %{B-}"
    , ppUrgent = wrap ("%{F" ++ red ++ "} ") " %{F-}"
    , ppHidden = wrap " " " "
    , ppWsSep = ""
    , ppSep = " : "
    , ppTitle = shorten 40
    }
   
dbusOutput :: D.Client -> String -> IO ()
dbusOutput dbus str = do
    let signal = (D.signal objectPath interfaceName memberName) {
	    D.signalBody = [D.toVariant $ UTF8.decodeString str]
	}
    D.emit dbus signal
  where
    objectPath = D.objectPath_ "/org/xmonad/Log"
    interfaceName = D.interfaceName_ "org.xmonad.Log"
    memberName = D.memberName_ "Update"

------------------------------------------------------------------------
-- Startup hook

-- Perform an arbitrary action each time xmonad starts or is restarted
-- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
-- per-workspace layout choices.
--
-- By default, do nothing.
myStartupHook :: X ()
myStartupHook = do
  setWMName "LG3D"
  spawn "/bin/bash /home/liolin/.xmonad/autostart.sh"
  ------------------------------------------------------------------------
-- Now run xmonad with all the defaults we set up.

-- Run xmonad with the settings you specify. No need to modify this.
--
main :: IO ()
main = do
  dbus <- D.connectSession
  -- Request access to the DBus name
  D.requestName dbus (D.busName_ "org.xmonad.Log")
    [D.nameAllowReplacement, D.nameReplaceExisting, D.nameDoNotQueue]

  --h <- spawnPipe "xmobar"
  xmonad $ docks defaults {
    -- logHook = dynamicLogWithPP $ def { ppOutput = hPutStrLn h }
    logHook = dynamicLogWithPP (myLogHook dbus)
    } `additionalKeysP` myKeys 

-- A structure containing your configuration settings, overriding
-- fields in the default config. Any you don't override, will
-- use the defaults defined in xmonad/XMonad/Config.hs
--
-- No need to modify this.
--
defaults = def {
      -- simple stuff
	terminal           = myTerminal,
	focusFollowsMouse  = myFocusFollowsMouse,
	clickJustFocuses   = myClickJustFocuses,
	borderWidth        = myBorderWidth,
	modMask            = myModMask,
	workspaces         = myWorkspaces,
	normalBorderColor  = myNormalBorderColor,
	focusedBorderColor = myFocusedBorderColor,

      -- key bindings
	mouseBindings      = myMouseBindings,

      -- hooks, layouts
	layoutHook         = myLayout,
	manageHook         = myManageHook,
	handleEventHook    = myEventHook,
	--logHook            = myLogHook,
	startupHook        = myStartupHook
    }

-- | Finally, a copy of the default bindings in simple textual tabular format.
help :: String
help = unlines ["The default modifier key is 'alt'. Default keybindings:",
    "",
    "-- launching and killing programs",
    "mod-Enter  Launch xterminal",
    "mod-p            Launch dmenu",
    "mod-Shift-p      Launch gmrun",
    "mod-Shift-c      Close/kill the focused window",
    "mod-Space        Rotate through the available layout algorithms",
    "mod-Shift-Space  Reset the layouts on the current workSpace to default",
    "mod-n            Resize/refresh viewed windows to the correct size",
    "",
    "-- move focus up or down the window stack",
    "mod-Tab        Move focus to the next window",
    "mod-Shift-Tab  Move focus to the previous window",
    "mod-j          Move focus to the next window",
    "mod-k          Move focus to the previous window",
    "mod-m          Move focus to the master window",
    "",
    "-- modifying the window order",
    "mod-Shift-Return   Swap the focused window and the master window",
    "mod-Shift-j  Swap the focused window with the next window",
    "mod-Shift-k  Swap the focused window with the previous window",
    "",
    "-- resizing the master/slave ratio",
    "mod-h  Shrink the master area",
    "mod-l  Expand the master area",
    "",
    "-- floating layer support",
    "mod-t  Push window back into tiling; unfloat and re-tile it",
    "",
    "-- increase or decrease number of windows in the master area",
    "mod-comma  (mod-,)   Increment the number of windows in the master area",
    "mod-period (mod-.)   Deincrement the number of windows in the master area",
    "",
    "-- quit, or restart",
    "mod-Shift-q  Quit xmonad",
    "mod-q        Restart xmonad",
    "mod-[1..9]   Switch to workSpace N",
    "",
    "-- Workspaces & screens",
    "mod-Shift-[1..9]   Move client to workspace N",
    "mod-{w,e,r}        Switch to physical/Xinerama screens 1, 2, or 3",
    "mod-Shift-{w,e,r}  Move client to screen 1, 2, or 3",
    "",
    "-- Mouse bindings: default actions bound to mouse events",
    "mod-button1  Set the window to floating mode and move by dragging",
    "mod-button2  Raise the window to the top of the stack",
    "mod-button3  Set the window to floating mode and resize by dragging"]
#+end_src

** xmobar
#+begin_src lua :tangle no
Config {
       font = "xft:Zekton:size=10:bold:antialias=true"
       , additionalFonts = [ "xft:FontAwesome:size=11" ]
       , allDesktops = True
       , bgColor = "#282c34"
       , fgColor = "#bbc2cf"
       , position = TopW L 90
       , iconRoot = "/home/liolin/.xmonad/xpm/" 
       , commands = [ Run Cpu            [ "--template", "<fc=#a9a1e1><fn=1></fn></fc> <total>%"
					 , "--Low","3"
					 , "--High","50"
					 , "--low","#bbc2cf"
					 , "--normal","#bbc2cf"
					 , "--high","#fb4934"] 50

		    , Run Memory         ["-t","<fc=#51afef><fn=1></fn></fc> <usedratio>%"
					 ,"-H","80"
					 ,"-L","10"
					 ,"-l","#bbc2cf"
					 ,"-n","#bbc2cf"
					 ,"-h","#fb4934"] 50

		    , Run Date           "<fc=#ECBE7B><fn=1></fn></fc> %a %d.%m.%Y - %H:%M" "date" 300

		    , Run CoreTemp       ["-t", "<fc=#CDB464><fn=1></fn></fc> <core0>°"
					 , "-L", "30"
					 , "-H", "75"
					 , "-l", "lightblue"
					 , "-n", "#bbc2cf"
					 , "-h", "#aa4450"] 50
		     
		    -- , Run Alsa           "default" "Master"
		    --                      [ "--"
		    --                                , "--alsactl=/usr/bin/alsactl"
		    --                      ]
		   
		    , Run BatteryP       [ "BAT0" ]
					 [ "--template" , "<fc=#B1DE76><fn=1></fn></fc> <acstatus>"
					 , "--Low"      , "10"        -- units: %
					 , "--High"     , "80"        -- units: %
					 , "--low"      , "#fb4934" -- #ff5555
					 , "--normal"   , "#bbc2cf"
					 , "--high"     , "#98be65"

					 , "--" -- battery specific options
						   -- discharging status
						   , "-o"   , "<left>% (<timeleft>)"
						   -- AC "on" status
						   , "-O"   , "<left>% (<fc=#98be65>Charging</fc>)" -- 50fa7b
						   -- charged status
						   , "-i"   , "<fc=#98be65>Charged</fc>"
					 ] 50

		    -- , Run Com            "/usr/local/bin/xkblayout-state" ["print \"%s-%e\""] "kbx" 600
		    , Run Com "/home/liolin/.xmonad/cmus" [] "cmus" 300
		    , Run StdinReader
		    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = "<icon=haskell_20.xpm/> %StdinReader% }{ %cmus% | %cpu% | %memory% | %battery% | %date%  |" -- #69DFFA
       }
#+end_src

* Xouranlpp
** Required Packages                                               :packages:
#+begin_example
xournalpp
#+end_example

* TODO Wireguard
** Required Packages                                               :packages:
#+begin_example
wireguard-tools
openresolv
#+end_example

* Virtual Machine Management
** Required Packages                                               :packages:
#+begin_example
virt-viewer
#+end_example

* Evince
** Required Packages                                               :packages:
#+begin_example
evince
#+end_example

* mpv
#+begin_src conf :tangle ~/.config/mpv/mpv.conf
ytdl-raw-options=yes-playlist=
#+end_src

** Required Packages                                               :packages:
#+begin_example
mpv, yt-dlp
#+end_example

* .NET
** Required Packages                                               :packages:
#+begin_example
dotnet-sdk
#+end_example

* UxPlay
An AirPlay Application.
It enables streaming from iPhone to Linux
** Required Packages                                               :packages:
#+begin_example
uxplay
#+end_example

* TiLP
An application to transfer files to the TI-Nspire
** Required Packages                                               :packages:
#+begin_example
tilp
#+end_example



* Local Variables
;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
